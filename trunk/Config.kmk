## @file
# Global Project Configuration File
#

#------------------------------------------------------------------------------
# Global definitions
#------------------------------------------------------------------------------

# Version: N.N.N[.N] where 1 <= N <= 127 (Mozilla requirement)
PLUGIN_VERSION  = 0.3.3

# Build: Symbolic name like "Beta 1" (empty for GA builds). Ends with "test" in
# intermediate builds
PLUGIN_BUILD    = test

#
# Override handler for .asm files to compile them with the MASM-compilant tool
#
KBUILD_SRC_HANDLERS := .asm:def_src_handler_masm $(KBUILD_SRC_HANDLERS)
define def_src_handler_masm
local type := $(if $(TOOL_$(tool)_COMPILE_MASM_CMDS),MASM,AS)
 $(kb-src-one 2)
endef
PROPS_ACCUMULATE_R += $(if $(TOOL_$(tool)_COMPILE_MASM_CMDS),MASM,AS)FLAGS

#------------------------------------------------------------------------------
# Tools
#------------------------------------------------------------------------------

#
# Add support for MASM to the GCC compiler
#
TOOL_GXX3OMF_MASM                   = $(PATH_TOOL_ALP)
TOOL_GXX3OMF_MASMFLAGS              = -Mb
TOOL_GXX3OMF_COMPILE_MASM_OUTPUT    = $(outbase).lst
TOOL_GXX3OMF_COMPILE_MASM_DEPEND    =
TOOL_GXX3OMF_COMPILE_MASM_DEPORD    =
define TOOL_GXX3OMF_COMPILE_MASM_CMDS
	$(QUIET)$(TOOL_GXX3OMF_MASM) -D:__GNUC__ -D:__EMX__\
		$(flags) $(addsuffix /,$(addprefix -I:, $(incs))) $(addprefix -D:, $(defs))\
		$(source)\
		-Fl:$(outbase).lst\
		-Fd:$(dep)\
		-Fo:$(obj)
endef

#------------------------------------------------------------------------------
# Common libraries referenced by components
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# General Stuff
#------------------------------------------------------------------------------

KBUILD_SDK_PATHS           += $(PATH_ROOT)

TEMPLATE_Base               = Odin C/C++ sources
TEMPLATE_Base_TOOL          = GXX3OMF
TEMPLATE_Base_SDKS          = ODIN
TEMPLATE_Base_INCS          = $(PATH_ROOT)/include/include/plugin \
                              $(PATH_ROOT)/include/sdk/nspr/include
## @todo need?
#TEMPLATE_Base_DEFS          = USE_OS2_TOOLKIT_HEADERS OS2EMX_PLAIN_CHAR
TEMPLATE_Base_DEFS          = OS2EMX_PLAIN_CHAR NPODIN
TEMPLATE_Base_DEFS.debug    = DEBUG

ifn1of ($(EMXOMFLD_TYPE),WLINK wlink)
TEMPLATE_Base_LDFLAGS       = -Zlinker '"DISABLE 1121"'
endif

## @todo later
# generate .sym files but don't put them in a separate dir
#TEMPLATE_Base_LD_DEBUG       = split
#TEMPLATE_Base_DEBUG_STAGE    = nul

#
# Include a site-specific config for local overrides
#
ifndef LOCALCFG
 LOCALCFG := $(wildcard $(PATH_ROOT)/LocalConfig.kmk)
 ifneq ($(LOCALCFG),)
  include $(LOCALCFG)
 endif
endif

#------------------------------------------------------------------------------
# Post-processing
#------------------------------------------------------------------------------

ifeq ($(PATH_TOOL_ALP),)
ifneq ($(PATH_SDK_OS2TK4),)
PATH_TOOL_ALP := $(PATH_SDK_OS2TK4)/bin/alp.exe
else
PATH_TOOL_ALP := alp.exe
endif
endif

ifneq ($(PATH_SDK_OS2TK4),)
#
# We can't add Toolkit includes in _INCS (it will casuse then to be searched
# before GCC headers and lead to conflicts), so use -idirafter.
#
TEMPLATE_OdinCxx_CFLAGS    += -idirafter $(PATH_SDK_OS2TK4)/h
TEMPLATE_OdinCxx_CXXFLAGS  += -idirafter $(PATH_SDK_OS2TK4)/h
#
# INCLUDE is needed for ALP.
#
export INCLUDE := $(if $(INCLUDE),$(INCLUDE);)$(PATH_SDK_OS2TK4)/inc
endif
