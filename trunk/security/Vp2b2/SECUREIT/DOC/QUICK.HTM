<HTML>
<HEAD>
  <TITLE>SecureIt - Quick Start</TITLE>
</HEAD>
<body background="backgrnd.gif" onLoad="parent.index.location.href='empty.htm'; return true">
<h2>Quick Start: Building SecureIt into your program</h2>

<p>
  This chapter provides a quick-start guide to getting basic SecureIt
  functionality built into your program.  For a fuller reference, please
  refer to the sections on <a href="compiler.htm">compiler issues</a>,
  the <a href="api.htm">SecureIt API</a>,
  the <a href="internal.htm">SecureIt Internals</a> and the
  <a href="examples.htm">Examples</a>.

<p>
  Start by generating a data blob using <a
  href="gendata.htm">GenData</a>.  A template .GEN file can be found in
  UTIL\DEMO.GEN - if you just want to get started, load it into a text
  editor to select the correct language option for the output file, and
  use this file as input to GenData.

<p>
  Next, make a simple .KEY file - a sample one can be found in
  UTIL\DEMO.KEY.  You can configure it, or you can leave this until
  later where you are more sure about what you want to do with SecureIt.

<p>
  An important thing to keep in mind is that the options specified in
  the MakeKey and GenData configurations should match the options you
  specify in your program when calling SecureIt API functions,
  specifically the <a href="api.htm#KeySetup">KeySetup</a> API. (Which
  is used to tell SecureIt where the RSA-encrypted data blob can be
  found, as well as various options for validating the password.)

<p>
  Next, include the data file generated by
  <a href="gendata.htm">GenData</a> into your program. In Pascal, this
  looks something like

<pre>
  {$I MyData.Inc}
</pre>
And in C,
<pre>
  #include "mydata.h"
</pre>

  In REXX, simply copy and paste the file into the source code.

<p>
  Next, specify which RSA-encrypted data blob and password parameters to
  use by calling the <a href="api.htm#KeySetup">KeySetup</a> function
  (Pascal):

<pre>
  KeySetup(True, False, False, $010101, @SIData, SIDataLen);
</pre>
In C,
<pre>
  KeySetup(TRUE, FALSE, FALSE, 0x010101, &SIData, SIDataLen);
</pre>
- and in REXX,
<pre>
  rc = KeySetup(1, 0, 0, '010101', SIData, SIDataLen)
</pre>

<p>
  The above is enough to initialise SecureIt. Next, prompt the user for
  a name and password, and tell SecureIt that you would like this
  name/password combination validated. Obviously, this should not be
  constant strings as in this example but be be strings somehow input by
  the user or read from an INI file:

<pre>
  KeySetNamePsw('Allan Mertner', 'jhKYIUyjhy82lkij');
</pre>

<p>
  Last, call <a href="api.htm#KeyCheck">KeyCheck</a> to see if the
  specified combination is valid:

<pre>
  if KeyCheck(TRUE) then
    // Program is registered
  else
    // Key is invalid
</pre>


<p>
  In some cases, this may be all that is required in your program,
  although you would not be using many of the more advanced SecureIt
  features if you did not make more calls to the SecureIt API.

<p>
  Please review the <a href="api.htm">API documentation</a> as well as
  the example source code and descriptions for more detailed information
  about the various ways in which you can use SecureIt.

