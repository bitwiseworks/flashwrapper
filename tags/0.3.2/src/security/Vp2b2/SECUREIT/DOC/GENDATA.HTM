<HTML>
<HEAD>
  <TITLE>SecureIt - GenData</TITLE>
</HEAD>
<body background="backgrnd.gif" onLoad="parent.index.location.href='gendata.inx'; return true">
<h1>SecureIt - GenData</h1>

<p>
  GenData is a utility program for SecureIt that has its name derived
  from what it does: It generates data for inclusion in your program.
<p>
  Thus, unlike the <a href="makekey.htm">MakeKey</a> program, which will
  be run every time a customer registers your software, GenData only
  needs to be executed when you are in the process of writing your
  application.
<p>
  GenData is a simple text-mode command line utility that takes
  just one parameter: the name of a GenData setup file.  This file,
  containing information about what kind of data you want to include in
  your program, how to encrypt it, and how to output it, has a default
  extension of .GEN.  A typical execution of GenData could look like
<pre>
  GENDATA MySetup.Gen
</pre>
  This line will cause GenData to parse the setup defined in MySetup.Gen
  and output a file for inclusion in your program.  The screen output
  from GenData will look something like this:
<pre>
     GENDATA v2.0 for SecureIt/2 v2.0
   þ Parsing command line...
   þ Using mkclient.GEN as setup file
   þ Reading RSA key from MKCLIENT.RSA
   þ Generating data blob...
   þ Length of encrypted data is 2608 bytes
   þ Generating Pascal output file MKCLIENT.INC
   þ Done.
</pre>
<p>
  In addition to the data defined using the GenData keywords as
  described below, a number of code fragments are also included in the
  encrypted data block.  This code is used for verifying serial number
  expiration, serial number lockouts, and decoding user strings embedded
  in the data block.

<p>
  For an overview of GenData's role in SecureIt, please refer to the <a
  href="overview.htm">overview</a> section of this document.

<h2><a name="config">The GenData configuration file</h2>
<p>
  GenData configuration files are plain text files with a default
  extention of.GEN.  All blank lines and lines where the leading
  character is a semicolon (;) are considered to be comments; all other
  lines should have a valid keyword followed by data.
<p>
  In the following, please find a complete list of all keywords accepted
  by GenData.
<p>

<h3><a name="format">Format [Pascal, C, REXX or Binary]</h3>
<p>
  Use the Format keyword to define the output format of the data
  generated.  The data is an array of byte values, which can be output
  in Pascal, C or REXX syntax to be included with an include statement,
  or it can be output in a binary data file.
<p>
Default: <em>Format Pascal</em>
<p>

<h3><a name="bytesperline">BytesPerLine [Decimal Number]</h3>
<p>
  If the <a href="#format">Format</a> specified is either C, Pascal or
  REXX, this keyword is used to define how many bytes of data are to be
  defined on each source line of the output file.  This is for cosmetic
  purposes only.  For REXX, a value of 32 is appropriate.
<p>
Default: <em>BytesPerLine 8</em>
<p>

<h3><a name="outputto">OutputTo [FileName]</h3>
<p>
  This is the filename that will contain the generated output data.  If
  the file already exists, it will be overwritten without a warning
  message.
<p>
Default: <em>No default; this keyword must be present</em>
<p>

<h3><a name="getrandom">GetRandom [Pseudo or Keyboard]</h3>
<p>
  This keyword is used to determine how the random numbers
  required to generate a strong RSA key are found.  By default, a
  pseudo-random algorithm (which is cryptographically a weak method) is
  used to generate the numbers; if Keyboard is specified, you will be
  prompted for keyboard input when generating an RSA key.  The timing of
  the keystrokes are then used to generate truly random numbers.
<p>
Default: <em>GetRandom Pseudo</em>
<p>

<h3><a name="keylength">KeyLength [64, 128, 256, 512 or 768]</h3>
<p>
  This keyword specifies the length in bits of the RSA key generated.
  The RSA key will be used to encrypt the data before it is output, and
  can optionally be used to encrypt the password string generated by
  <a href="makekey.htm">MakeKey</a> as well.
<p>
  A 128-bit key is enough for testing purposes, and a 512-bit or better
  key should be used if you want to be reasonably sure your key cannot
  be cracked.  The processing time required to encode and decode the
  data and password strings goes up for longer key lengths.

<p>
  When selecting key length, keep in mind that you are not likely to
  find government agencies or corporations with crypto-experts and large
  amounts of processing power trying to break your software.  Rather,
  you wish to protect yourself against crackers who typically do not
  have these resources and may decide that a 128- or 256-bit key is
  enough.  SecureIt itself uses a short 128-bit key.
<p>
Default: <em>KeyLength 128</em>
<p>

<h3><a name="saversakeyto">SaveRSAKeyTo [FileName]</h3>
<p>
  The filename specified as the parameter to this keyword will be used
  to store the RSA key generated in binary format.  This is required to
  be able to RSA-encrypt passwords with MakeKey; this filename is the
  one that should be specified as the <a
  href="makekey.htm#RSAKeyFile">RSAKeyFile</a> keyword in the MakeKey
  configuration file.
<p>
  The file specified using this keyword will contain both the secret and
  the public parts of the RSA key in unencrypted form: Do not give this
  file to crackers!
<p>
Default: <em>No default</em>
<p>

<h3><a name="readrsakeyfrom">ReadRSAKeyFrom [FileName]</h3>
<p>
  If this keyword is specified, GenData will attempt to read an existing
  RSA key from the file specified instead of generating a new one.  The
  file specified should be one previously stored using the
  <a href="#saversakeyto">SaveRSAKeyTo</a> keyword.
<p>
  If the file specified does not exist, GenData will generate a new RSA
  key.  If the SaveRSAKeyTo keyword is specified, it will then save the
  key to this file from where it can be picked up on subsequent
  executions of Gendata.
<p>
  If an RSA key could be read from the specified file, the
  <a href="#keylength">KeyLength</a> keyword is ignored; the length of the
  key stored in the file will be used.
<p>
Default: <em>No default</em>
<p>

<h3><a name="userstring">[Decimal Number] UserString [String]</h3>
<p>
  The UserString keyword can be used to store user-defined strings
  inside the RSA encrypted data block generated by GenData.  Strings
  stored in this way can be retrieved during program execution by
  calling the
  <a href="api.htm#KeyGetUserString">KeyGetUserString</a> API.
<p>
  User strings stored in this manner are numbered from 0 and up, and you
  can preceed the UserString keyword with the number of the current
  string to make it easier to remember the numbers when editing the
  file.  The numbers are ignored when parsing the setup file.
<p>
  The following defines 3 user strings:
<pre>
  0  UserString The first string, index 0
  1  UserString The second encrypted string, index 1
  UserString This string is number 2
</pre>
<p>
  User strings have a maximum length of 245 characters.
<p>
Default: <em>No default</em>
<p>

<h3><a name="userstringq">[Decimal Number] UserStringQ [Quoted String]</h3>
<p>
  The UserStringQ keyword is a variant of the UserString keyword, and
  allows strings enclosed in quotes to be defined.  This allows you to
  embed strings containing leading or trailing spaces, or even
  linefeeds, to be included.
<p>
  The following defines 2 quoted user strings:
<pre>
  0  UserStringQ " The first string, index 0. Has leading space"
  1  UserStringQ "Another string, which
has a line feed in the middle of it"
</pre>
<p>
  Each line in a quoted user string can be a maximum of about 245
  characters long.
<p>
Default: <em>No default</em>
<p>

<h3><a name="userstringb">[Decimal Number] UserStringB [Hex bytes]</h3>
<p>
  The UserStringB keyword is a variant of the UserString keyword, which
  allows you to include binary data "strings".  The parameter to this
  keyword should be space-delimited hex-bytes not containing any zero
  value bytes.
<p>
  The following defines 2 binary "strings":
<pre>
  0  UserStringB  10 20 30 40 FF 03
  1  UserStringB  C3 AB 01 F7
</pre>
<p>
  The input line for defining binary user strings is truncated after 255
  characters, which effectively limits the maximum length of this type
  of field to about 80 bytes.
<p>
Default: <em>No default</em>
<p>

<h3><a name="snlockout">SNLockOut [8-byte Hex number]</h3>
<p>
  The SNLockOut keyword allows you to "lock out" certain serial numbers
  from working.  This feature is useful if you know that a few of your
  registered users have posted their passwords publicly or otherwise
  abused the registration.  In the next version of the software, you add
  the serial numbers to the GenData list of locked-out numbers, and
  their keys will not work with the new version.
<p>
  The serial numbers 0 and FFFFFFFF are always locked out and are used
  by SecureIt for special purposes.
<p>
  The following locks out 3 otherwise valid serial numbers:
<pre>
  SNLockOut   00017728
  SNLockOut   00017F3B
  SNLockOut   0000CA31
</pre>
<p>
Default: <em>SNLockOut 0</em>
<p>

<h3><a name="sndatelock">SNDateLock [StartSN EndSN EndDate]</h3>
<p>
  Use this keyword to restrict a range of serial numbers to work only
  until a predefined date.  After the specified date, passwords with the
  serial numbers affected will expire and will no longer work as valid;
  the <a href="api.htm#KeyCheck">KeyCheck</a> API will return FALSE, and
  the <a href="api.htm#KeyGetSerialNumberStatus">KeyGetSerialNumberStatus</a>
  API will return snExpired.
<p>
  The following defines 3 ranges of serial numbers that will expire:
<pre>
  SNDateLock   00010000  0001FFFF  6 Dec 1997
  SNDateLock   00020000  0002FFFF  1 Jul 2000
  SNDateLock   00030000  0003FFFF 18 Mar 2005
</pre>
<p>
Default: <em>No default</em>
<p>


<h2><a name="example">An example GenData configuration file</h2>
<p>
  Several .GEN files can be found with the examples, and a standard .GEN
  file useable as a template can be found in the UTIL directory.
<p>
  The following is a working GenData configuration file:
<pre>
;
; Setup file for generating data blob for SecureIt v2
; Valid keywords:
;
; Blob generation parameters

KeyLength       256
GetRandom       Pseudo
Format          Pascal
OutputTo        MyApp.inc
BytesPerLine    12
SaveRSAKeyTo    MyApp.RSA
ReadRSAKeyFrom  MyApp.RSA

; Define user strings

;              Application name
0  UserString  MyApplication

;              Invalid password in INI file
1  UserString  The name/password combination in the Ini file is invalid.
2  UserStringQ " "
3  UserString  Please delete this file and re-run the program to enter the
4  UserString  correct registration details.

;              Thank you message after entering correct password
5  UserString  Thank you for registering MyApp.  The name and password have been
6  userString  stored in MyApp.ini to avoid prompting for them in the future.

;              Invalid password entered message
7  UserString  The name/password combination given is invalid.
8  UserString  Please re-run the program and enter the correct name and password.

;              Key expired message
9  UserString  This program has expired and can no longer be run.
10 UserString  Please contact the program author for an updated version.

; Define locked-out serial numbers

SNLockOut 00000000
SNLockOut 00002041

; Define date-limited serial numbers

SNDateLock 00010000 00010FFF  01 Jun 1997
SNDateLock 00021000 00021FFF  01 Jul 1997
SNDateLock 00032000 00032FFF  01 Aug 1997
SNDateLock 00043000 00043FFF  01 Sep 1997
SNDateLock 00054000 00054FFF  01 Oct 1997
SNDateLock 00065000 00065FFF  01 Nov 1997
</pre>
</body>
</html>
