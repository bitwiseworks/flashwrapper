<HTML>
<HEAD>
  <TITLE>SecureIt - Compiler considerations</TITLE>
</HEAD>
<body background="backgrnd.gif" onLoad="parent.index.location.href='compiler.inx'; return true">
<h1>SecureIt compiler support</h1>
<p>
  The core of SecureIt is located in a 32-bit Dynamic Link Library
  called SECURIT2.DLL that is about 20kB in size and written using
  Virtual Pascal for OS/2 v1.10. (For REXX, another DLL is used; see
  below for details).

<p>
  Files for interfacing SecureIt to Borland C++, GNU C, IBM Visual Age
  C++, Virtual Pascal and OS/2 REXX are included in the package.

<p>
  The different languages and compilers use slightly different methods
  for interfacing to an external DLL, and implement a variety of
  features that makes it impossible to ship just one set of examples
  with SecureIt.  In the following, please find instructions for getting
  started and using SecureIt successfully with all of the above
  mentioned tools.

<p>
  For all languages, the relevant DLL (SECURIT2.DLL or RXSI2.DLL) should
  be available in the LIBPATH defined in CONFIG.SYS.

<p>
  All entry points use the "C" calling convention, where parameters are
  passed on the stack, are pushed from right to left, and the caller
  cleans up the stack on return.  Most compilers handle this seamlessly;
  the ones for which headers and examples are included certainly do.

<h2><a name="vp">Virtual Pascal</h2>
<p>
  Virtual Pascal for OS/2 is a Borland Pascal and Borland Delphi
  compatible Pascal compiler for OS/2, sold by
  <a href="http://www.fprint.co.uk/vpascal.html" target="_top">fPrint UK Ltd</a>.
  This is the compiler that was used to produce the SecureIt DLLs and
  utilities.

<p>
  The Pascal interface works with Virtual Pascal for OS/2 v1.10, and
  should work with other Borland Pascal compatible OS/2 compilers as
  well.

<p>
  To use SecureIt with VP/2, a Pascal file defining an interface to
  SecureIt can be found in the PASCAL subdirectory of Secureit:
  SecurIt2.Pas.

<p>
  To compile a program that uses SecureIt, this unit should be included
  in the <b>Uses</b> clause of the program:

<pre>
  uses
    SecurIt2;
</pre>

<p>
  For the VP/2 IDE to be able to find the file either copy it to the
  SOURCE\RTL subdirectory, or include the directory containing it to the
  Options->Directories->Units entry field.

<p>
  To use the command line compiler VPC.EXE, the directory containing the
  file should be included in the -U option:

<pre>
  vpc -u x:\si20\pascal ...
</pre>

<p>

<h2><a name=bc>Borland C++</h2>
<p>
  Support and development of Borland C++ has officially been dropped,
  but many people still use this compiler for developing OS/2
  applications. Borland C++ is sold by <a
  href="http://www.borland.com" target="_top">Borland Int.</a>.

<p>
  The BC interface has been tested with Borland C++ for OS/2, using
  BCC.EXE v4.11 and TLINK.EXE v1.5.  Sample command files for compiling
  and linking a single example (MK.CMD) and all examples
  (MAKEALL.CMD) are included in the BC\SAMPLE subdirectory.

<p>
  The files required to use SecureIt with BC++ can be found in the BC
  subdirectory:

<pre>
  SECURIT2.H       #include this header file in your program
  SECURIT2.LIB     Pass to linker to resolve external references
  SECURIT2.DEF     Definition file, used to generate the import
                   library file
</pre>
<p>
  The .H file should be included using a #include statement, like this:

<pre>
  #include "securit2.h"
</pre>

<p>
  To successfully link the program, the linker needs to be pointed to
  the .LIB file, which will allow external references to the SecureIt
  DLL to be resolved.  To do this, the name of the library should be
  passed to TLINK; you may want to move the .LIB file to a directory
  searched by TLINK by default.

<p>
  The .DEF file that can be found in the BC directory as well includes
  the module definition statements required to produce the .LIB file
  using the LIB utility.

<h2><a name=vac>IBM Visual Age C++</h2>
<p>
  IBM Visual Age C++ is a modern C++ compiler, supported on multiple
  platforms.  It is sold by <a href="http://www.software.ibm.com"
  target="_top">IBM</a> and is widely used by OS/2 and Windows
  developers alike.

<p>
  The IBMCPP interface has been tested with IBM Visual Age C++ for OS/2
  version 3, using ICC.EXE v3 and ILINK.EXE v01.00.05. Sample command
  files for compiling and linking a single example (MK.CMD) and all
  examples (MAKEALL.CMD) are included in the IBMCPP\SAMPLE subdirectory.

<p>
  Note: During beta testing of SecureIt, I have been made aware that
  newer versions of VAC, or versions where bugfixes have been applied,
  generate slightly different code from my version.  If your version is
  not exactly the same as the one used to compile the examples, it is
  unlikely that they will work if you just recompile them and do not
  update the .KEY files accordingly.

<p>
  The files required to use SecureIt with VAC can be found in the IBMCPP
  subdirectory:

<pre>
  SECURIT2.H       #include this header file in your program
  SECURIT2.LIB     Pass to linker to resolve external references
  SECURIT2.DEF     Definition file, used to generate the import
                   library file
</pre>
<p>
  The .H file should be included using a #include statement, like this:

<pre>
  #include "securit2.h"
</pre>

<p>
  To successfully link the program, the linker needs to be pointed to
  the .LIB file, which will allow external references to the SecureIt
  DLL to be resolved.  To do this, the name of the library should be
  passed to ILINK; you may want to move the .LIB file to a directory
  searched by ILINK by default.

<p>
  The .DEF file that can be found in the IBMCPP directory as well includes
  the module definition statements required to produce the .LIB file
  using the LIB utility.

<p>
  The VAC compiler does not support embedded assembler instructions;
  because of this, only the PROT5 example demonstrates code patching
  using this compiler.

<p>

<h2><a name=gcc>GNU C</h2>
<p>
  GNU C is a free C/C++ compiler, which can be downloaded from various
  sources, including <a
  href="ftp://ftp.leo.org/pub/comp/os/os2/leo/gnu/emx+gcc/">ftp.leo.org</a>.
  The GNU C compiler is not written by a single person but rather by the
  combined effort of lots of people - and the source code is available
  as well.  Since GNU C is available for a lot of platforms, and is
  free, it is popular with many developers, including OS/2 ones.

<p>
  For OS/2, GNU C is available with the EMX library; programs written
  using GCC use EMX - this includes ones that use SecureIt.

<p>
  The GCC interface has been tested with GCC v2.7.2 and EMX v0.9c.
  Sample command files for compiling and linking a single example
  (MK.CMD) and all examples (MAKEALL.CMD) are included in the GCC\SAMPLE
  subdirectory.

<p>
  The files required to use SecureIt with GCC can be found in the GCC
  subdirectory:

<pre>
  SECURIT2.H       #include this header file in your program
  SECURIT2.A       Library file used to to resolve external references
  SECURIT2.DEF     Definition file, used to generate the import
                   library file
  MAKELIB.CMD      Run this to generate a new .A file
</pre>
<p>
  The .H file should be included using a #include statement, like this:

<pre>
  #include "securit2.h"
</pre>

<p>
  To successfully link the program, the linker (ld) needs to be pointed
  to the .a file, which will allow external references to the SecureIt
  DLL to be resolved.  To do this, the name of the library should be
  passed to gcc using a -l parameter.

<p>
  You also need to tell gcc where to find the header file securit2.h;
  this can be done using the -I directive.  The default MK.CMD includes
  the ".." directory:

<pre>
  gcc -lsecurit2 -I ..
</pre>

<p>
  Before this will work, the .a file needs to be copied to somewhere in
  your include path, such as \usr\lib.

<p>
  The gcc command line used by MK.CMD also includes a few optimisation
  options to prevent the resulting programs from becoming <b>too</b>
  large; please refer to the MK.CMD file.

<p>
  The .DEF file that can be found in the GCC directory includes
  the module definition statements required to produce the .A file
  (using the supplied MAKELIB command file) or a .LIB file for use with
  LINK386.

<p>

<h2><a name="rexx">REXX</h2>

<p>
  The REXX version of SecureIt differs from the rest because REXX is an
  interpreted rather than a compiled language.  The base REXX language,
  which originates from IBM's mainframe systems and ships with all
  versions of OS/2, is very powerful but not directly suitable for
  implementing copy protection - primarily because full source is
  included and can easily be modified by the end users.

<p>
  However, a number of REXX tools, like VX-REXX and GpfRexx are used
  widely for shareware development, and programs written using these
  tools can be protected using SecureIt.  In these, the REXX source code
  is tokenized or otherwise scrambled before distribution.

<p>
  For demonstration purposes, standard REXX is adequate and all REXX
  examples (found in the REXX\SAMPLE subdirectory) are written using
  standard REXX.

<p>
  To use SecureIt from a REXX, you need to copy the REXX version of the
  SecureIt DLL to a directory in your LIBPATH.  Then, you should make
  the SecureIt functions available to your program by calling the
  RxFuncAdd function, like this:

<pre>
  call RxFuncAdd "KeyLoadFuncs", "RXSI2", "KeyLoadFuncs"
  call KeyLoadFuncs
</pre>

<p>
  This REXX code first makes the special SecureIt API KeyLoadFuncs
  available, and then calls it.  The KeyLoadFuncs API registers all
  other SecureIt APIs with the REXX processor of OS/2.

<p>
  When you have finished using the SecureIt API, and just before your
  program terminates, you should call the KeyDropFuncs API to free all
  references to the RXSI2.DLL file:

<pre>
  call KeyDropFuncs
</pre>

<p>
  Once the SecureIt API functions have been registered, they can be used
  as in any other program; for details on each API, please refer to the
  <a href="api.htm">API reference section</a>.

<p>
  When using SecureIt in REXX programs, a few things need to be
  considered:

<ul>
  <li>All variables in REXX are stored and processed as text strings,
  even if they should be interpreted as numbers, etc.<p>

  <li>All Boolean parameter types expect a 0 (for FALSE) or a 1 (for
  TRUE).  The REXX examples all define the symbols TRUE and FALSE to be
  1 and 0, respectively.<p>

  <li>All memory references passed to or returned from SecureIt are HEX
  strings.  Use the X2D function to convert it to decimal, or the D2X
  function to convert a decimal number to hex before passing it to
  SecureIt,<p>

  <li>REXX does not support the concept of parameters that are changed
  by the function (<b>var</b> in Pascal, and pointer types in C).
  SecureIt functions that do this in C or Pascal return the appropriate
  value as a function result instead.<p>

  <li>REXX is interpreted, not compiled.  This means, that the code
  cannot be called directly, or patched using a CodePatch password
  field.  These functions can still be used from REXX by applying them
  to an external DLL, as is demonstrated in the Prot2-Prot5 examples in
  the REXX\SAMPLE subdirectory.

</ul>
<p>


</body>
</html>

