/* $Id: wrap_JRIEnv_Generated.cpp,v 1.1 2003/09/14 19:13:53 bird Exp $
 *
 * Autogenerated by npjrienv.cmd from npjnienv_mozjri.h.
 *
 * InnoTek Systemberatung GmbH confidential
 *
 * Copyright (c) 2003 InnoTek Systemberatung GmbH
 * Author: knut st. osmundsen <bird@anduin.net>
 *
 * All Rights Reserved
 *
 */



/**
 * FindClass wrapper.
 * 
 * Prototype:
 *     struct java_lang_Class* (JRICALL *FindClass)
 *         (JRIEnv* env, jint op, const char* a)
 */
struct java_lang_Class* __cdecl npjridown_FindClass(PNPJRIENV pEnv, jint op, const char* a)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_FindClass enter"));
    struct java_lang_Class* rc = (*pEnv->pOrgEnv)->FindClass(pEnv->pOrgEnv, op, a);
    dprintf(("npJRIEnvWrapper: npjridown_FindClass leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * Throw wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *Throw)
 *         (JRIEnv* env, jint op, struct java_lang_Throwable* a)
 */
void __cdecl npjridown_Throw(PNPJRIENV pEnv, jint op, struct java_lang_Throwable* a)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_Throw enter"));
    (*pEnv->pOrgEnv)->Throw(pEnv->pOrgEnv, op, a);
    dprintf(("npJRIEnvWrapper: npjridown_Throw leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * ThrowNew wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *ThrowNew)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, const char* b)
 */
void __cdecl npjridown_ThrowNew(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, const char* b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_ThrowNew enter"));
    (*pEnv->pOrgEnv)->ThrowNew(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_ThrowNew leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * ExceptionOccurred wrapper.
 * 
 * Prototype:
 *     struct java_lang_Throwable*     (JRICALL *ExceptionOccurred)
 *         (JRIEnv* env, jint op)
 */
struct java_lang_Throwable* __cdecl npjridown_ExceptionOccurred(PNPJRIENV pEnv, jint op)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_ExceptionOccurred enter"));
    struct java_lang_Throwable* rc = (*pEnv->pOrgEnv)->ExceptionOccurred(pEnv->pOrgEnv, op);
    dprintf(("npJRIEnvWrapper: npjridown_ExceptionOccurred leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * ExceptionDescribe wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *ExceptionDescribe)
 *         (JRIEnv* env, jint op)
 */
void __cdecl npjridown_ExceptionDescribe(PNPJRIENV pEnv, jint op)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_ExceptionDescribe enter"));
    (*pEnv->pOrgEnv)->ExceptionDescribe(pEnv->pOrgEnv, op);
    dprintf(("npJRIEnvWrapper: npjridown_ExceptionDescribe leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * ExceptionClear wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *ExceptionClear)
 *         (JRIEnv* env, jint op)
 */
void __cdecl npjridown_ExceptionClear(PNPJRIENV pEnv, jint op)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_ExceptionClear enter"));
    (*pEnv->pOrgEnv)->ExceptionClear(pEnv->pOrgEnv, op);
    dprintf(("npJRIEnvWrapper: npjridown_ExceptionClear leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * NewGlobalRef wrapper.
 * 
 * Prototype:
 *     jglobal (JRICALL *NewGlobalRef)
 *         (JRIEnv* env, jint op, void* a)
 */
jglobal __cdecl npjridown_NewGlobalRef(PNPJRIENV pEnv, jint op, void* a)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_NewGlobalRef enter"));
    jglobal rc = (*pEnv->pOrgEnv)->NewGlobalRef(pEnv->pOrgEnv, op, a);
    dprintf(("npJRIEnvWrapper: npjridown_NewGlobalRef leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * DisposeGlobalRef wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *DisposeGlobalRef)
 *         (JRIEnv* env, jint op, jglobal a)
 */
void __cdecl npjridown_DisposeGlobalRef(PNPJRIENV pEnv, jint op, jglobal a)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_DisposeGlobalRef enter"));
    (*pEnv->pOrgEnv)->DisposeGlobalRef(pEnv->pOrgEnv, op, a);
    dprintf(("npJRIEnvWrapper: npjridown_DisposeGlobalRef leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * GetGlobalRef wrapper.
 * 
 * Prototype:
 *     void*   (JRICALL *GetGlobalRef)
 *         (JRIEnv* env, jint op, jglobal a)
 */
void* __cdecl npjridown_GetGlobalRef(PNPJRIENV pEnv, jint op, jglobal a)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetGlobalRef enter"));
    void* rc = (*pEnv->pOrgEnv)->GetGlobalRef(pEnv->pOrgEnv, op, a);
    dprintf(("npJRIEnvWrapper: npjridown_GetGlobalRef leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * SetGlobalRef wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetGlobalRef)
 *         (JRIEnv* env, jint op, jglobal a, void* b)
 */
void __cdecl npjridown_SetGlobalRef(PNPJRIENV pEnv, jint op, jglobal a, void* b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetGlobalRef enter"));
    (*pEnv->pOrgEnv)->SetGlobalRef(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_SetGlobalRef leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * IsSameObject wrapper.
 * 
 * Prototype:
 *     jbool   (JRICALL *IsSameObject)
 *         (JRIEnv* env, jint op, void* a, void* b)
 */
jbool __cdecl npjridown_IsSameObject(PNPJRIENV pEnv, jint op, void* a, void* b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_IsSameObject enter"));
    jbool rc = (*pEnv->pOrgEnv)->IsSameObject(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_IsSameObject leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewObject wrapper.
 * 
 * Prototype:
 *     void*   (JRICALL *NewObject)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, ...)
 */
void* __cdecl npjridown_NewObject(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_NewObject enter"));
    void* rc = (*pEnv->pOrgEnv)->NewObjectV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_NewObject leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewObjectV wrapper.
 * 
 * Prototype:
 *     void*   (JRICALL *NewObjectV)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, va_list c)
 */
void* __cdecl npjridown_NewObjectV(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_NewObjectV enter"));
    void* rc = (*pEnv->pOrgEnv)->NewObjectV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_NewObjectV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewObjectA wrapper.
 * 
 * Prototype:
 *     void*   (JRICALL *NewObjectA)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
 */
void* __cdecl npjridown_NewObjectA(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_NewObjectA enter"));
    void* rc = (*pEnv->pOrgEnv)->NewObjectA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_NewObjectA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetObjectClass wrapper.
 * 
 * Prototype:
 *     struct java_lang_Class* (JRICALL *GetObjectClass)
 *         (JRIEnv* env, jint op, void* a)
 */
struct java_lang_Class* __cdecl npjridown_GetObjectClass(PNPJRIENV pEnv, jint op, void* a)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetObjectClass enter"));
    struct java_lang_Class* rc = (*pEnv->pOrgEnv)->GetObjectClass(pEnv->pOrgEnv, op, a);
    dprintf(("npJRIEnvWrapper: npjridown_GetObjectClass leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * IsInstanceOf wrapper.
 * 
 * Prototype:
 *     jbool   (JRICALL *IsInstanceOf)
 *         (JRIEnv* env, jint op, void* a, struct java_lang_Class* b)
 */
jbool __cdecl npjridown_IsInstanceOf(PNPJRIENV pEnv, jint op, void* a, struct java_lang_Class* b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_IsInstanceOf enter"));
    jbool rc = (*pEnv->pOrgEnv)->IsInstanceOf(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_IsInstanceOf leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetMethodID wrapper.
 * 
 * Prototype:
 *     jint    (JRICALL *GetMethodID)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, const char* b, const char* c)
 */
jint __cdecl npjridown_GetMethodID(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, const char* b, const char* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetMethodID enter"));
    jint rc = (*pEnv->pOrgEnv)->GetMethodID(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_GetMethodID leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethod wrapper.
 * 
 * Prototype:
 *     void*   (JRICALL *CallMethod)
 *         (JRIEnv* env, jint op, void* a, jint b, ...)
 */
void* __cdecl npjridown_CallMethod(PNPJRIENV pEnv, jint op, void* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethod enter"));
    void* rc = (*pEnv->pOrgEnv)->CallMethodV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodV wrapper.
 * 
 * Prototype:
 *     void*   (JRICALL *CallMethodV)
 *         (JRIEnv* env, jint op, void* a, jint b, va_list c)
 */
void* __cdecl npjridown_CallMethodV(PNPJRIENV pEnv, jint op, void* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodV enter"));
    void* rc = (*pEnv->pOrgEnv)->CallMethodV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodA wrapper.
 * 
 * Prototype:
 *     void*   (JRICALL *CallMethodA)
 *         (JRIEnv* env, jint op, void* a, jint b, JRIValue* c)
 */
void* __cdecl npjridown_CallMethodA(PNPJRIENV pEnv, jint op, void* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodA enter"));
    void* rc = (*pEnv->pOrgEnv)->CallMethodA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodBoolean wrapper.
 * 
 * Prototype:
 *     jbool   (JRICALL *CallMethodBoolean)
 *         (JRIEnv* env, jint op, void* a, jint b, ...)
 */
jbool __cdecl npjridown_CallMethodBoolean(PNPJRIENV pEnv, jint op, void* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodBoolean enter"));
    jbool rc = (*pEnv->pOrgEnv)->CallMethodBooleanV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodBoolean leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodBooleanV wrapper.
 * 
 * Prototype:
 *     jbool   (JRICALL *CallMethodBooleanV)
 *         (JRIEnv* env, jint op, void* a, jint b, va_list c)
 */
jbool __cdecl npjridown_CallMethodBooleanV(PNPJRIENV pEnv, jint op, void* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodBooleanV enter"));
    jbool rc = (*pEnv->pOrgEnv)->CallMethodBooleanV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodBooleanV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodBooleanA wrapper.
 * 
 * Prototype:
 *     jbool   (JRICALL *CallMethodBooleanA)
 *         (JRIEnv* env, jint op, void* a, jint b, JRIValue* c)
 */
jbool __cdecl npjridown_CallMethodBooleanA(PNPJRIENV pEnv, jint op, void* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodBooleanA enter"));
    jbool rc = (*pEnv->pOrgEnv)->CallMethodBooleanA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodBooleanA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodByte wrapper.
 * 
 * Prototype:
 *     jbyte   (JRICALL *CallMethodByte)
 *         (JRIEnv* env, jint op, void* a, jint b, ...)
 */
jbyte __cdecl npjridown_CallMethodByte(PNPJRIENV pEnv, jint op, void* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodByte enter"));
    jbyte rc = (*pEnv->pOrgEnv)->CallMethodByteV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodByte leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodByteV wrapper.
 * 
 * Prototype:
 *     jbyte   (JRICALL *CallMethodByteV)
 *         (JRIEnv* env, jint op, void* a, jint b, va_list c)
 */
jbyte __cdecl npjridown_CallMethodByteV(PNPJRIENV pEnv, jint op, void* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodByteV enter"));
    jbyte rc = (*pEnv->pOrgEnv)->CallMethodByteV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodByteV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodByteA wrapper.
 * 
 * Prototype:
 *     jbyte   (JRICALL *CallMethodByteA)
 *         (JRIEnv* env, jint op, void* a, jint b, JRIValue* c)
 */
jbyte __cdecl npjridown_CallMethodByteA(PNPJRIENV pEnv, jint op, void* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodByteA enter"));
    jbyte rc = (*pEnv->pOrgEnv)->CallMethodByteA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodByteA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodChar wrapper.
 * 
 * Prototype:
 *     jchar   (JRICALL *CallMethodChar)
 *         (JRIEnv* env, jint op, void* a, jint b, ...)
 */
jchar __cdecl npjridown_CallMethodChar(PNPJRIENV pEnv, jint op, void* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodChar enter"));
    jchar rc = (*pEnv->pOrgEnv)->CallMethodCharV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodChar leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodCharV wrapper.
 * 
 * Prototype:
 *     jchar   (JRICALL *CallMethodCharV)
 *         (JRIEnv* env, jint op, void* a, jint b, va_list c)
 */
jchar __cdecl npjridown_CallMethodCharV(PNPJRIENV pEnv, jint op, void* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodCharV enter"));
    jchar rc = (*pEnv->pOrgEnv)->CallMethodCharV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodCharV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodCharA wrapper.
 * 
 * Prototype:
 *     jchar   (JRICALL *CallMethodCharA)
 *         (JRIEnv* env, jint op, void* a, jint b, JRIValue* c)
 */
jchar __cdecl npjridown_CallMethodCharA(PNPJRIENV pEnv, jint op, void* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodCharA enter"));
    jchar rc = (*pEnv->pOrgEnv)->CallMethodCharA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodCharA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodShort wrapper.
 * 
 * Prototype:
 *     jshort  (JRICALL *CallMethodShort)
 *         (JRIEnv* env, jint op, void* a, jint b, ...)
 */
jshort __cdecl npjridown_CallMethodShort(PNPJRIENV pEnv, jint op, void* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodShort enter"));
    jshort rc = (*pEnv->pOrgEnv)->CallMethodShortV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodShort leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodShortV wrapper.
 * 
 * Prototype:
 *     jshort  (JRICALL *CallMethodShortV)
 *         (JRIEnv* env, jint op, void* a, jint b, va_list c)
 */
jshort __cdecl npjridown_CallMethodShortV(PNPJRIENV pEnv, jint op, void* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodShortV enter"));
    jshort rc = (*pEnv->pOrgEnv)->CallMethodShortV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodShortV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodShortA wrapper.
 * 
 * Prototype:
 *     jshort  (JRICALL *CallMethodShortA)
 *         (JRIEnv* env, jint op, void* a, jint b, JRIValue* c)
 */
jshort __cdecl npjridown_CallMethodShortA(PNPJRIENV pEnv, jint op, void* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodShortA enter"));
    jshort rc = (*pEnv->pOrgEnv)->CallMethodShortA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodShortA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodInt wrapper.
 * 
 * Prototype:
 *     jint    (JRICALL *CallMethodInt)
 *         (JRIEnv* env, jint op, void* a, jint b, ...)
 */
jint __cdecl npjridown_CallMethodInt(PNPJRIENV pEnv, jint op, void* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodInt enter"));
    jint rc = (*pEnv->pOrgEnv)->CallMethodIntV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodInt leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodIntV wrapper.
 * 
 * Prototype:
 *     jint    (JRICALL *CallMethodIntV)
 *         (JRIEnv* env, jint op, void* a, jint b, va_list c)
 */
jint __cdecl npjridown_CallMethodIntV(PNPJRIENV pEnv, jint op, void* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodIntV enter"));
    jint rc = (*pEnv->pOrgEnv)->CallMethodIntV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodIntV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodIntA wrapper.
 * 
 * Prototype:
 *     jint    (JRICALL *CallMethodIntA)
 *         (JRIEnv* env, jint op, void* a, jint b, JRIValue* c)
 */
jint __cdecl npjridown_CallMethodIntA(PNPJRIENV pEnv, jint op, void* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodIntA enter"));
    jint rc = (*pEnv->pOrgEnv)->CallMethodIntA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodIntA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodLong wrapper.
 * 
 * Prototype:
 *     jlong   (JRICALL *CallMethodLong)
 *         (JRIEnv* env, jint op, void* a, jint b, ...)
 */
long long __cdecl npjridown_CallMethodLong(PNPJRIENV pEnv, jint op, void* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodLong enter"));
    jlong llRc = (*pEnv->pOrgEnv)->CallMethodLongV(pEnv->pOrgEnv, op, a, b, args);
#if NO_LONG_LONG
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodLong leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodLong leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * CallMethodLongV wrapper.
 * 
 * Prototype:
 *     jlong   (JRICALL *CallMethodLongV)
 *         (JRIEnv* env, jint op, void* a, jint b, va_list c)
 */
long long __cdecl npjridown_CallMethodLongV(PNPJRIENV pEnv, jint op, void* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodLongV enter"));
    jlong llRc = (*pEnv->pOrgEnv)->CallMethodLongV(pEnv->pOrgEnv, op, a, b, c);
#if NO_LONG_LONG
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodLongV leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodLongV leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * CallMethodLongA wrapper.
 * 
 * Prototype:
 *     jlong   (JRICALL *CallMethodLongA)
 *         (JRIEnv* env, jint op, void* a, jint b, JRIValue* c)
 */
long long __cdecl npjridown_CallMethodLongA(PNPJRIENV pEnv, jint op, void* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodLongA enter"));
    jlong llRc = (*pEnv->pOrgEnv)->CallMethodLongA(pEnv->pOrgEnv, op, a, b, c);
#if NO_LONG_LONG
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodLongA leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodLongA leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * CallMethodFloat wrapper.
 * 
 * Prototype:
 *     jfloat  (JRICALL *CallMethodFloat)
 *         (JRIEnv* env, jint op, void* a, jint b, ...)
 */
jfloat __cdecl npjridown_CallMethodFloat(PNPJRIENV pEnv, jint op, void* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodFloat enter"));
    jfloat rc = (*pEnv->pOrgEnv)->CallMethodFloatV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodFloat leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodFloatV wrapper.
 * 
 * Prototype:
 *     jfloat  (JRICALL *CallMethodFloatV)
 *         (JRIEnv* env, jint op, void* a, jint b, va_list c)
 */
jfloat __cdecl npjridown_CallMethodFloatV(PNPJRIENV pEnv, jint op, void* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodFloatV enter"));
    jfloat rc = (*pEnv->pOrgEnv)->CallMethodFloatV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodFloatV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodFloatA wrapper.
 * 
 * Prototype:
 *     jfloat  (JRICALL *CallMethodFloatA)
 *         (JRIEnv* env, jint op, void* a, jint b, JRIValue* c)
 */
jfloat __cdecl npjridown_CallMethodFloatA(PNPJRIENV pEnv, jint op, void* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodFloatA enter"));
    jfloat rc = (*pEnv->pOrgEnv)->CallMethodFloatA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodFloatA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallMethodDouble wrapper.
 * 
 * Prototype:
 *     jdouble (JRICALL *CallMethodDouble)
 *         (JRIEnv* env, jint op, void* a, jint b, ...)
 */
jdouble __cdecl npjridown_CallMethodDouble(PNPJRIENV pEnv, jint op, void* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodDouble enter"));
    jdouble rdRc = (*pEnv->pOrgEnv)->CallMethodDoubleV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodDouble leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * CallMethodDoubleV wrapper.
 * 
 * Prototype:
 *     jdouble (JRICALL *CallMethodDoubleV)
 *         (JRIEnv* env, jint op, void* a, jint b, va_list c)
 */
jdouble __cdecl npjridown_CallMethodDoubleV(PNPJRIENV pEnv, jint op, void* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodDoubleV enter"));
    jdouble rdRc = (*pEnv->pOrgEnv)->CallMethodDoubleV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodDoubleV leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * CallMethodDoubleA wrapper.
 * 
 * Prototype:
 *     jdouble (JRICALL *CallMethodDoubleA)
 *         (JRIEnv* env, jint op, void* a, jint b, JRIValue* c)
 */
jdouble __cdecl npjridown_CallMethodDoubleA(PNPJRIENV pEnv, jint op, void* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodDoubleA enter"));
    jdouble rdRc = (*pEnv->pOrgEnv)->CallMethodDoubleA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallMethodDoubleA leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * GetFieldID wrapper.
 * 
 * Prototype:
 *     jint    (JRICALL *GetFieldID)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, const char* b, const char* c)
 */
jint __cdecl npjridown_GetFieldID(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, const char* b, const char* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldID enter"));
    jint rc = (*pEnv->pOrgEnv)->GetFieldID(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldID leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetField wrapper.
 * 
 * Prototype:
 *     void*   (JRICALL *GetField)
 *         (JRIEnv* env, jint op, void* a, jint b)
 */
void* __cdecl npjridown_GetField(PNPJRIENV pEnv, jint op, void* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetField enter"));
    void* rc = (*pEnv->pOrgEnv)->GetField(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetFieldBoolean wrapper.
 * 
 * Prototype:
 *     jbool   (JRICALL *GetFieldBoolean)
 *         (JRIEnv* env, jint op, void* a, jint b)
 */
jbool __cdecl npjridown_GetFieldBoolean(PNPJRIENV pEnv, jint op, void* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldBoolean enter"));
    jbool rc = (*pEnv->pOrgEnv)->GetFieldBoolean(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldBoolean leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetFieldByte wrapper.
 * 
 * Prototype:
 *     jbyte   (JRICALL *GetFieldByte)
 *         (JRIEnv* env, jint op, void* a, jint b)
 */
jbyte __cdecl npjridown_GetFieldByte(PNPJRIENV pEnv, jint op, void* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldByte enter"));
    jbyte rc = (*pEnv->pOrgEnv)->GetFieldByte(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldByte leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetFieldChar wrapper.
 * 
 * Prototype:
 *     jchar   (JRICALL *GetFieldChar)
 *         (JRIEnv* env, jint op, void* a, jint b)
 */
jchar __cdecl npjridown_GetFieldChar(PNPJRIENV pEnv, jint op, void* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldChar enter"));
    jchar rc = (*pEnv->pOrgEnv)->GetFieldChar(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldChar leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetFieldShort wrapper.
 * 
 * Prototype:
 *     jshort  (JRICALL *GetFieldShort)
 *         (JRIEnv* env, jint op, void* a, jint b)
 */
jshort __cdecl npjridown_GetFieldShort(PNPJRIENV pEnv, jint op, void* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldShort enter"));
    jshort rc = (*pEnv->pOrgEnv)->GetFieldShort(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldShort leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetFieldInt wrapper.
 * 
 * Prototype:
 *     jint    (JRICALL *GetFieldInt)
 *         (JRIEnv* env, jint op, void* a, jint b)
 */
jint __cdecl npjridown_GetFieldInt(PNPJRIENV pEnv, jint op, void* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldInt enter"));
    jint rc = (*pEnv->pOrgEnv)->GetFieldInt(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldInt leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetFieldLong wrapper.
 * 
 * Prototype:
 *     jlong   (JRICALL *GetFieldLong)
 *         (JRIEnv* env, jint op, void* a, jint b)
 */
long long __cdecl npjridown_GetFieldLong(PNPJRIENV pEnv, jint op, void* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldLong enter"));
    jlong llRc = (*pEnv->pOrgEnv)->GetFieldLong(pEnv->pOrgEnv, op, a, b);
#if NO_LONG_LONG
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldLong leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldLong leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * GetFieldFloat wrapper.
 * 
 * Prototype:
 *     jfloat  (JRICALL *GetFieldFloat)
 *         (JRIEnv* env, jint op, void* a, jint b)
 */
jfloat __cdecl npjridown_GetFieldFloat(PNPJRIENV pEnv, jint op, void* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldFloat enter"));
    jfloat rc = (*pEnv->pOrgEnv)->GetFieldFloat(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldFloat leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetFieldDouble wrapper.
 * 
 * Prototype:
 *     jdouble (JRICALL *GetFieldDouble)
 *         (JRIEnv* env, jint op, void* a, jint b)
 */
jdouble __cdecl npjridown_GetFieldDouble(PNPJRIENV pEnv, jint op, void* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldDouble enter"));
    jdouble rdRc = (*pEnv->pOrgEnv)->GetFieldDouble(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetFieldDouble leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * SetField wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetField)
 *         (JRIEnv* env, jint op, void* a, jint b, void* c)
 */
void __cdecl npjridown_SetField(PNPJRIENV pEnv, jint op, void* a, jint b, void* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetField enter"));
    (*pEnv->pOrgEnv)->SetField(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetFieldBoolean wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetFieldBoolean)
 *         (JRIEnv* env, jint op, void* a, jint b, jbool c)
 */
void __cdecl npjridown_SetFieldBoolean(PNPJRIENV pEnv, jint op, void* a, jint b, jbool c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetFieldBoolean enter"));
    (*pEnv->pOrgEnv)->SetFieldBoolean(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetFieldBoolean leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetFieldByte wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetFieldByte)
 *         (JRIEnv* env, jint op, void* a, jint b, jbyte c)
 */
void __cdecl npjridown_SetFieldByte(PNPJRIENV pEnv, jint op, void* a, jint b, jbyte c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetFieldByte enter"));
    (*pEnv->pOrgEnv)->SetFieldByte(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetFieldByte leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetFieldChar wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetFieldChar)
 *         (JRIEnv* env, jint op, void* a, jint b, jchar c)
 */
void __cdecl npjridown_SetFieldChar(PNPJRIENV pEnv, jint op, void* a, jint b, jchar c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetFieldChar enter"));
    (*pEnv->pOrgEnv)->SetFieldChar(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetFieldChar leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetFieldShort wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetFieldShort)
 *         (JRIEnv* env, jint op, void* a, jint b, jshort c)
 */
void __cdecl npjridown_SetFieldShort(PNPJRIENV pEnv, jint op, void* a, jint b, jshort c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetFieldShort enter"));
    (*pEnv->pOrgEnv)->SetFieldShort(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetFieldShort leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetFieldInt wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetFieldInt)
 *         (JRIEnv* env, jint op, void* a, jint b, jint c)
 */
void __cdecl npjridown_SetFieldInt(PNPJRIENV pEnv, jint op, void* a, jint b, jint c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetFieldInt enter"));
    (*pEnv->pOrgEnv)->SetFieldInt(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetFieldInt leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetFieldLong wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetFieldLong)
 *         (JRIEnv* env, jint op, void* a, jint b, jlong c)
 */
void __cdecl npjridown_SetFieldLong(PNPJRIENV pEnv, jint op, void* a, jint b, jlong c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetFieldLong enter"));
    (*pEnv->pOrgEnv)->SetFieldLong(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetFieldLong leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetFieldFloat wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetFieldFloat)
 *         (JRIEnv* env, jint op, void* a, jint b, jfloat c)
 */
void __cdecl npjridown_SetFieldFloat(PNPJRIENV pEnv, jint op, void* a, jint b, jfloat c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetFieldFloat enter"));
    (*pEnv->pOrgEnv)->SetFieldFloat(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetFieldFloat leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetFieldDouble wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetFieldDouble)
 *         (JRIEnv* env, jint op, void* a, jint b, jdouble c)
 */
void __cdecl npjridown_SetFieldDouble(PNPJRIENV pEnv, jint op, void* a, jint b, jdouble c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetFieldDouble enter"));
    (*pEnv->pOrgEnv)->SetFieldDouble(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetFieldDouble leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * IsSubclassOf wrapper.
 * 
 * Prototype:
 *     jbool   (JRICALL *IsSubclassOf)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, struct java_lang_Class* b)
 */
jbool __cdecl npjridown_IsSubclassOf(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, struct java_lang_Class* b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_IsSubclassOf enter"));
    jbool rc = (*pEnv->pOrgEnv)->IsSubclassOf(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_IsSubclassOf leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticMethodID wrapper.
 * 
 * Prototype:
 *     jint    (JRICALL *GetStaticMethodID)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, const char* b, const char* c)
 */
jint __cdecl npjridown_GetStaticMethodID(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, const char* b, const char* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticMethodID enter"));
    jint rc = (*pEnv->pOrgEnv)->GetStaticMethodID(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticMethodID leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethod wrapper.
 * 
 * Prototype:
 *     void*   (JRICALL *CallStaticMethod)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, ...)
 */
void* __cdecl npjridown_CallStaticMethod(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethod enter"));
    void* rc = (*pEnv->pOrgEnv)->CallStaticMethodV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodV wrapper.
 * 
 * Prototype:
 *     void*   (JRICALL *CallStaticMethodV)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, va_list c)
 */
void* __cdecl npjridown_CallStaticMethodV(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodV enter"));
    void* rc = (*pEnv->pOrgEnv)->CallStaticMethodV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodA wrapper.
 * 
 * Prototype:
 *     void*   (JRICALL *CallStaticMethodA)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
 */
void* __cdecl npjridown_CallStaticMethodA(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodA enter"));
    void* rc = (*pEnv->pOrgEnv)->CallStaticMethodA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodBoolean wrapper.
 * 
 * Prototype:
 *     jbool   (JRICALL *CallStaticMethodBoolean)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, ...)
 */
jbool __cdecl npjridown_CallStaticMethodBoolean(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodBoolean enter"));
    jbool rc = (*pEnv->pOrgEnv)->CallStaticMethodBooleanV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodBoolean leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodBooleanV wrapper.
 * 
 * Prototype:
 *     jbool   (JRICALL *CallStaticMethodBooleanV)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, va_list c)
 */
jbool __cdecl npjridown_CallStaticMethodBooleanV(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodBooleanV enter"));
    jbool rc = (*pEnv->pOrgEnv)->CallStaticMethodBooleanV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodBooleanV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodBooleanA wrapper.
 * 
 * Prototype:
 *     jbool   (JRICALL *CallStaticMethodBooleanA)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
 */
jbool __cdecl npjridown_CallStaticMethodBooleanA(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodBooleanA enter"));
    jbool rc = (*pEnv->pOrgEnv)->CallStaticMethodBooleanA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodBooleanA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodByte wrapper.
 * 
 * Prototype:
 *     jbyte   (JRICALL *CallStaticMethodByte)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, ...)
 */
jbyte __cdecl npjridown_CallStaticMethodByte(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodByte enter"));
    jbyte rc = (*pEnv->pOrgEnv)->CallStaticMethodByteV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodByte leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodByteV wrapper.
 * 
 * Prototype:
 *     jbyte   (JRICALL *CallStaticMethodByteV)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, va_list c)
 */
jbyte __cdecl npjridown_CallStaticMethodByteV(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodByteV enter"));
    jbyte rc = (*pEnv->pOrgEnv)->CallStaticMethodByteV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodByteV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodByteA wrapper.
 * 
 * Prototype:
 *     jbyte   (JRICALL *CallStaticMethodByteA)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
 */
jbyte __cdecl npjridown_CallStaticMethodByteA(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodByteA enter"));
    jbyte rc = (*pEnv->pOrgEnv)->CallStaticMethodByteA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodByteA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodChar wrapper.
 * 
 * Prototype:
 *     jchar   (JRICALL *CallStaticMethodChar)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, ...)
 */
jchar __cdecl npjridown_CallStaticMethodChar(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodChar enter"));
    jchar rc = (*pEnv->pOrgEnv)->CallStaticMethodCharV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodChar leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodCharV wrapper.
 * 
 * Prototype:
 *     jchar   (JRICALL *CallStaticMethodCharV)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, va_list c)
 */
jchar __cdecl npjridown_CallStaticMethodCharV(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodCharV enter"));
    jchar rc = (*pEnv->pOrgEnv)->CallStaticMethodCharV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodCharV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodCharA wrapper.
 * 
 * Prototype:
 *     jchar   (JRICALL *CallStaticMethodCharA)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
 */
jchar __cdecl npjridown_CallStaticMethodCharA(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodCharA enter"));
    jchar rc = (*pEnv->pOrgEnv)->CallStaticMethodCharA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodCharA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodShort wrapper.
 * 
 * Prototype:
 *     jshort  (JRICALL *CallStaticMethodShort)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, ...)
 */
jshort __cdecl npjridown_CallStaticMethodShort(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodShort enter"));
    jshort rc = (*pEnv->pOrgEnv)->CallStaticMethodShortV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodShort leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodShortV wrapper.
 * 
 * Prototype:
 *     jshort  (JRICALL *CallStaticMethodShortV)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, va_list c)
 */
jshort __cdecl npjridown_CallStaticMethodShortV(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodShortV enter"));
    jshort rc = (*pEnv->pOrgEnv)->CallStaticMethodShortV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodShortV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodShortA wrapper.
 * 
 * Prototype:
 *     jshort  (JRICALL *CallStaticMethodShortA)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
 */
jshort __cdecl npjridown_CallStaticMethodShortA(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodShortA enter"));
    jshort rc = (*pEnv->pOrgEnv)->CallStaticMethodShortA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodShortA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodInt wrapper.
 * 
 * Prototype:
 *     jint    (JRICALL *CallStaticMethodInt)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, ...)
 */
jint __cdecl npjridown_CallStaticMethodInt(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodInt enter"));
    jint rc = (*pEnv->pOrgEnv)->CallStaticMethodIntV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodInt leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodIntV wrapper.
 * 
 * Prototype:
 *     jint    (JRICALL *CallStaticMethodIntV)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, va_list c)
 */
jint __cdecl npjridown_CallStaticMethodIntV(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodIntV enter"));
    jint rc = (*pEnv->pOrgEnv)->CallStaticMethodIntV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodIntV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodIntA wrapper.
 * 
 * Prototype:
 *     jint    (JRICALL *CallStaticMethodIntA)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
 */
jint __cdecl npjridown_CallStaticMethodIntA(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodIntA enter"));
    jint rc = (*pEnv->pOrgEnv)->CallStaticMethodIntA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodIntA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodLong wrapper.
 * 
 * Prototype:
 *     jlong   (JRICALL *CallStaticMethodLong)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, ...)
 */
long long __cdecl npjridown_CallStaticMethodLong(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodLong enter"));
    jlong llRc = (*pEnv->pOrgEnv)->CallStaticMethodLongV(pEnv->pOrgEnv, op, a, b, args);
#if NO_LONG_LONG
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodLong leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodLong leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * CallStaticMethodLongV wrapper.
 * 
 * Prototype:
 *     jlong   (JRICALL *CallStaticMethodLongV)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, va_list c)
 */
long long __cdecl npjridown_CallStaticMethodLongV(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodLongV enter"));
    jlong llRc = (*pEnv->pOrgEnv)->CallStaticMethodLongV(pEnv->pOrgEnv, op, a, b, c);
#if NO_LONG_LONG
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodLongV leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodLongV leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * CallStaticMethodLongA wrapper.
 * 
 * Prototype:
 *     jlong   (JRICALL *CallStaticMethodLongA)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
 */
long long __cdecl npjridown_CallStaticMethodLongA(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodLongA enter"));
    jlong llRc = (*pEnv->pOrgEnv)->CallStaticMethodLongA(pEnv->pOrgEnv, op, a, b, c);
#if NO_LONG_LONG
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodLongA leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodLongA leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * CallStaticMethodFloat wrapper.
 * 
 * Prototype:
 *     jfloat  (JRICALL *CallStaticMethodFloat)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, ...)
 */
jfloat __cdecl npjridown_CallStaticMethodFloat(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodFloat enter"));
    jfloat rc = (*pEnv->pOrgEnv)->CallStaticMethodFloatV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodFloat leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodFloatV wrapper.
 * 
 * Prototype:
 *     jfloat  (JRICALL *CallStaticMethodFloatV)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, va_list c)
 */
jfloat __cdecl npjridown_CallStaticMethodFloatV(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodFloatV enter"));
    jfloat rc = (*pEnv->pOrgEnv)->CallStaticMethodFloatV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodFloatV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodFloatA wrapper.
 * 
 * Prototype:
 *     jfloat  (JRICALL *CallStaticMethodFloatA)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
 */
jfloat __cdecl npjridown_CallStaticMethodFloatA(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodFloatA enter"));
    jfloat rc = (*pEnv->pOrgEnv)->CallStaticMethodFloatA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodFloatA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticMethodDouble wrapper.
 * 
 * Prototype:
 *     jdouble (JRICALL *CallStaticMethodDouble)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, ...)
 */
jdouble __cdecl npjridown_CallStaticMethodDouble(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, b);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodDouble enter"));
    jdouble rdRc = (*pEnv->pOrgEnv)->CallStaticMethodDoubleV(pEnv->pOrgEnv, op, a, b, args);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodDouble leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * CallStaticMethodDoubleV wrapper.
 * 
 * Prototype:
 *     jdouble (JRICALL *CallStaticMethodDoubleV)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, va_list c)
 */
jdouble __cdecl npjridown_CallStaticMethodDoubleV(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, va_list c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodDoubleV enter"));
    jdouble rdRc = (*pEnv->pOrgEnv)->CallStaticMethodDoubleV(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodDoubleV leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * CallStaticMethodDoubleA wrapper.
 * 
 * Prototype:
 *     jdouble (JRICALL *CallStaticMethodDoubleA)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
 */
jdouble __cdecl npjridown_CallStaticMethodDoubleA(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, JRIValue* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodDoubleA enter"));
    jdouble rdRc = (*pEnv->pOrgEnv)->CallStaticMethodDoubleA(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_CallStaticMethodDoubleA leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * GetStaticFieldID wrapper.
 * 
 * Prototype:
 *     jint    (JRICALL *GetStaticFieldID)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, const char* b, const char* c)
 */
jint __cdecl npjridown_GetStaticFieldID(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, const char* b, const char* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldID enter"));
    jint rc = (*pEnv->pOrgEnv)->GetStaticFieldID(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldID leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticField wrapper.
 * 
 * Prototype:
 *     void*   (JRICALL *GetStaticField)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b)
 */
void* __cdecl npjridown_GetStaticField(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticField enter"));
    void* rc = (*pEnv->pOrgEnv)->GetStaticField(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticFieldBoolean wrapper.
 * 
 * Prototype:
 *     jbool   (JRICALL *GetStaticFieldBoolean)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b)
 */
jbool __cdecl npjridown_GetStaticFieldBoolean(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldBoolean enter"));
    jbool rc = (*pEnv->pOrgEnv)->GetStaticFieldBoolean(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldBoolean leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticFieldByte wrapper.
 * 
 * Prototype:
 *     jbyte   (JRICALL *GetStaticFieldByte)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b)
 */
jbyte __cdecl npjridown_GetStaticFieldByte(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldByte enter"));
    jbyte rc = (*pEnv->pOrgEnv)->GetStaticFieldByte(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldByte leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticFieldChar wrapper.
 * 
 * Prototype:
 *     jchar   (JRICALL *GetStaticFieldChar)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b)
 */
jchar __cdecl npjridown_GetStaticFieldChar(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldChar enter"));
    jchar rc = (*pEnv->pOrgEnv)->GetStaticFieldChar(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldChar leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticFieldShort wrapper.
 * 
 * Prototype:
 *     jshort  (JRICALL *GetStaticFieldShort)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b)
 */
jshort __cdecl npjridown_GetStaticFieldShort(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldShort enter"));
    jshort rc = (*pEnv->pOrgEnv)->GetStaticFieldShort(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldShort leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticFieldInt wrapper.
 * 
 * Prototype:
 *     jint    (JRICALL *GetStaticFieldInt)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b)
 */
jint __cdecl npjridown_GetStaticFieldInt(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldInt enter"));
    jint rc = (*pEnv->pOrgEnv)->GetStaticFieldInt(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldInt leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticFieldLong wrapper.
 * 
 * Prototype:
 *     jlong   (JRICALL *GetStaticFieldLong)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b)
 */
long long __cdecl npjridown_GetStaticFieldLong(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldLong enter"));
    jlong llRc = (*pEnv->pOrgEnv)->GetStaticFieldLong(pEnv->pOrgEnv, op, a, b);
#if NO_LONG_LONG
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldLong leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldLong leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * GetStaticFieldFloat wrapper.
 * 
 * Prototype:
 *     jfloat  (JRICALL *GetStaticFieldFloat)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b)
 */
jfloat __cdecl npjridown_GetStaticFieldFloat(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldFloat enter"));
    jfloat rc = (*pEnv->pOrgEnv)->GetStaticFieldFloat(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldFloat leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticFieldDouble wrapper.
 * 
 * Prototype:
 *     jdouble (JRICALL *GetStaticFieldDouble)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b)
 */
jdouble __cdecl npjridown_GetStaticFieldDouble(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldDouble enter"));
    jdouble rdRc = (*pEnv->pOrgEnv)->GetStaticFieldDouble(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetStaticFieldDouble leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * SetStaticField wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetStaticField)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, void* c)
 */
void __cdecl npjridown_SetStaticField(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, void* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticField enter"));
    (*pEnv->pOrgEnv)->SetStaticField(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetStaticFieldBoolean wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetStaticFieldBoolean)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, jbool c)
 */
void __cdecl npjridown_SetStaticFieldBoolean(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, jbool c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticFieldBoolean enter"));
    (*pEnv->pOrgEnv)->SetStaticFieldBoolean(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticFieldBoolean leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetStaticFieldByte wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetStaticFieldByte)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, jbyte c)
 */
void __cdecl npjridown_SetStaticFieldByte(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, jbyte c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticFieldByte enter"));
    (*pEnv->pOrgEnv)->SetStaticFieldByte(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticFieldByte leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetStaticFieldChar wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetStaticFieldChar)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, jchar c)
 */
void __cdecl npjridown_SetStaticFieldChar(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, jchar c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticFieldChar enter"));
    (*pEnv->pOrgEnv)->SetStaticFieldChar(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticFieldChar leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetStaticFieldShort wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetStaticFieldShort)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, jshort c)
 */
void __cdecl npjridown_SetStaticFieldShort(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, jshort c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticFieldShort enter"));
    (*pEnv->pOrgEnv)->SetStaticFieldShort(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticFieldShort leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetStaticFieldInt wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetStaticFieldInt)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, jint c)
 */
void __cdecl npjridown_SetStaticFieldInt(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, jint c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticFieldInt enter"));
    (*pEnv->pOrgEnv)->SetStaticFieldInt(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticFieldInt leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetStaticFieldLong wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetStaticFieldLong)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, jlong c)
 */
void __cdecl npjridown_SetStaticFieldLong(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, jlong c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticFieldLong enter"));
    (*pEnv->pOrgEnv)->SetStaticFieldLong(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticFieldLong leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetStaticFieldFloat wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetStaticFieldFloat)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, jfloat c)
 */
void __cdecl npjridown_SetStaticFieldFloat(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, jfloat c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticFieldFloat enter"));
    (*pEnv->pOrgEnv)->SetStaticFieldFloat(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticFieldFloat leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetStaticFieldDouble wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetStaticFieldDouble)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, jint b, jdouble c)
 */
void __cdecl npjridown_SetStaticFieldDouble(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, jint b, jdouble c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticFieldDouble enter"));
    (*pEnv->pOrgEnv)->SetStaticFieldDouble(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetStaticFieldDouble leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * NewString wrapper.
 * 
 * Prototype:
 *     struct java_lang_String*        (JRICALL *NewString)
 *         (JRIEnv* env, jint op, const jchar* a, jint b)
 */
struct java_lang_String* __cdecl npjridown_NewString(PNPJRIENV pEnv, jint op, const jchar* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_NewString enter"));
    struct java_lang_String* rc = (*pEnv->pOrgEnv)->NewString(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_NewString leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStringLength wrapper.
 * 
 * Prototype:
 *     jint    (JRICALL *GetStringLength)
 *         (JRIEnv* env, jint op, struct java_lang_String* a)
 */
jint __cdecl npjridown_GetStringLength(PNPJRIENV pEnv, jint op, struct java_lang_String* a)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetStringLength enter"));
    jint rc = (*pEnv->pOrgEnv)->GetStringLength(pEnv->pOrgEnv, op, a);
    dprintf(("npJRIEnvWrapper: npjridown_GetStringLength leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStringChars wrapper.
 * 
 * Prototype:
 *     const jchar*    (JRICALL *GetStringChars)
 *         (JRIEnv* env, jint op, struct java_lang_String* a)
 */
const jchar* __cdecl npjridown_GetStringChars(PNPJRIENV pEnv, jint op, struct java_lang_String* a)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetStringChars enter"));
    const jchar* rc = (*pEnv->pOrgEnv)->GetStringChars(pEnv->pOrgEnv, op, a);
    dprintf(("npJRIEnvWrapper: npjridown_GetStringChars leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewStringUTF wrapper.
 * 
 * Prototype:
 *     struct java_lang_String*        (JRICALL *NewStringUTF)
 *         (JRIEnv* env, jint op, const jbyte* a, jint b)
 */
struct java_lang_String* __cdecl npjridown_NewStringUTF(PNPJRIENV pEnv, jint op, const jbyte* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_NewStringUTF enter"));
    struct java_lang_String* rc = (*pEnv->pOrgEnv)->NewStringUTF(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_NewStringUTF leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStringUTFLength wrapper.
 * 
 * Prototype:
 *     jint    (JRICALL *GetStringUTFLength)
 *         (JRIEnv* env, jint op, struct java_lang_String* a)
 */
jint __cdecl npjridown_GetStringUTFLength(PNPJRIENV pEnv, jint op, struct java_lang_String* a)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetStringUTFLength enter"));
    jint rc = (*pEnv->pOrgEnv)->GetStringUTFLength(pEnv->pOrgEnv, op, a);
    dprintf(("npJRIEnvWrapper: npjridown_GetStringUTFLength leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStringUTFChars wrapper.
 * 
 * Prototype:
 *     const jbyte*    (JRICALL *GetStringUTFChars)
 *         (JRIEnv* env, jint op, struct java_lang_String* a)
 */
const jbyte* __cdecl npjridown_GetStringUTFChars(PNPJRIENV pEnv, jint op, struct java_lang_String* a)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetStringUTFChars enter"));
    const jbyte* rc = (*pEnv->pOrgEnv)->GetStringUTFChars(pEnv->pOrgEnv, op, a);
    dprintf(("npJRIEnvWrapper: npjridown_GetStringUTFChars leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewScalarArray wrapper.
 * 
 * Prototype:
 *     void*   (JRICALL *NewScalarArray)
 *         (JRIEnv* env, jint op, jint a, const char* b, const jbyte* c)
 */
void* __cdecl npjridown_NewScalarArray(PNPJRIENV pEnv, jint op, jint a, const char* b, const jbyte* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_NewScalarArray enter"));
    void* rc = (*pEnv->pOrgEnv)->NewScalarArray(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_NewScalarArray leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetScalarArrayLength wrapper.
 * 
 * Prototype:
 *     jint    (JRICALL *GetScalarArrayLength)
 *         (JRIEnv* env, jint op, void* a)
 */
jint __cdecl npjridown_GetScalarArrayLength(PNPJRIENV pEnv, jint op, void* a)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetScalarArrayLength enter"));
    jint rc = (*pEnv->pOrgEnv)->GetScalarArrayLength(pEnv->pOrgEnv, op, a);
    dprintf(("npJRIEnvWrapper: npjridown_GetScalarArrayLength leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetScalarArrayElements wrapper.
 * 
 * Prototype:
 *     jbyte*  (JRICALL *GetScalarArrayElements)
 *         (JRIEnv* env, jint op, void* a)
 */
jbyte* __cdecl npjridown_GetScalarArrayElements(PNPJRIENV pEnv, jint op, void* a)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetScalarArrayElements enter"));
    jbyte* rc = (*pEnv->pOrgEnv)->GetScalarArrayElements(pEnv->pOrgEnv, op, a);
    dprintf(("npJRIEnvWrapper: npjridown_GetScalarArrayElements leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewObjectArray wrapper.
 * 
 * Prototype:
 *     void*   (JRICALL *NewObjectArray)
 *         (JRIEnv* env, jint op, jint a, struct java_lang_Class* b, void* c)
 */
void* __cdecl npjridown_NewObjectArray(PNPJRIENV pEnv, jint op, jint a, struct java_lang_Class* b, void* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_NewObjectArray enter"));
    void* rc = (*pEnv->pOrgEnv)->NewObjectArray(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_NewObjectArray leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetObjectArrayLength wrapper.
 * 
 * Prototype:
 *     jint    (JRICALL *GetObjectArrayLength)
 *         (JRIEnv* env, jint op, void* a)
 */
jint __cdecl npjridown_GetObjectArrayLength(PNPJRIENV pEnv, jint op, void* a)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetObjectArrayLength enter"));
    jint rc = (*pEnv->pOrgEnv)->GetObjectArrayLength(pEnv->pOrgEnv, op, a);
    dprintf(("npJRIEnvWrapper: npjridown_GetObjectArrayLength leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetObjectArrayElement wrapper.
 * 
 * Prototype:
 *     void*   (JRICALL *GetObjectArrayElement)
 *         (JRIEnv* env, jint op, void* a, jint b)
 */
void* __cdecl npjridown_GetObjectArrayElement(PNPJRIENV pEnv, jint op, void* a, jint b)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetObjectArrayElement enter"));
    void* rc = (*pEnv->pOrgEnv)->GetObjectArrayElement(pEnv->pOrgEnv, op, a, b);
    dprintf(("npJRIEnvWrapper: npjridown_GetObjectArrayElement leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * SetObjectArrayElement wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *SetObjectArrayElement)
 *         (JRIEnv* env, jint op, void* a, jint b, void* c)
 */
void __cdecl npjridown_SetObjectArrayElement(PNPJRIENV pEnv, jint op, void* a, jint b, void* c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_SetObjectArrayElement enter"));
    (*pEnv->pOrgEnv)->SetObjectArrayElement(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_SetObjectArrayElement leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



#ifdef NPDLLJRICALLBACK_ALL
/**
 * RegisterNatives wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *RegisterNatives)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a, char** b, void** c)
 */
void __cdecl npjridown_RegisterNatives(PNPJRIENV pEnv, jint op, struct java_lang_Class* a, char** b, void** c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_RegisterNatives enter"));
    (*pEnv->pOrgEnv)->RegisterNatives(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_RegisterNatives leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}
#endif



/**
 * UnregisterNatives wrapper.
 * 
 * Prototype:
 *     void    (JRICALL *UnregisterNatives)
 *         (JRIEnv* env, jint op, struct java_lang_Class* a)
 */
void __cdecl npjridown_UnregisterNatives(PNPJRIENV pEnv, jint op, struct java_lang_Class* a)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_UnregisterNatives enter"));
    (*pEnv->pOrgEnv)->UnregisterNatives(pEnv->pOrgEnv, op, a);
    dprintf(("npJRIEnvWrapper: npjridown_UnregisterNatives leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * DefineClass wrapper.
 * 
 * Prototype:
 *     struct java_lang_Class* (JRICALL *DefineClass)
 *         (JRIEnv* env, jint op, struct java_lang_ClassLoader* a, jbyte* b, jsize bLen)
 */
struct java_lang_Class* __cdecl npjridown_DefineClass(PNPJRIENV pEnv, jint op, struct java_lang_ClassLoader* a, jbyte* b, jsize bLen)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_DefineClass enter"));
    struct java_lang_Class* rc = (*pEnv->pOrgEnv)->DefineClass(pEnv->pOrgEnv, op, a, b, bLen);
    dprintf(("npJRIEnvWrapper: npjridown_DefineClass leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewStringPlatform wrapper.
 * 
 * Prototype:
 *     struct java_lang_String*        (JRICALL *NewStringPlatform)
 *         (JRIEnv* env, jint op, const jbyte* a, jint b, const jbyte* c, jint d)
 */
struct java_lang_String* __cdecl npjridown_NewStringPlatform(PNPJRIENV pEnv, jint op, const jbyte* a, jint b, const jbyte* c, jint d)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_NewStringPlatform enter"));
    struct java_lang_String* rc = (*pEnv->pOrgEnv)->NewStringPlatform(pEnv->pOrgEnv, op, a, b, c, d);
    dprintf(("npJRIEnvWrapper: npjridown_NewStringPlatform leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStringPlatformChars wrapper.
 * 
 * Prototype:
 *     const jbyte*    (JRICALL *GetStringPlatformChars)
 *         (JRIEnv* env, jint op, struct java_lang_String* a, const jbyte* b, jint c)
 */
const jbyte* __cdecl npjridown_GetStringPlatformChars(PNPJRIENV pEnv, jint op, struct java_lang_String* a, const jbyte* b, jint c)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJRIEnvWrapper: npjridown_GetStringPlatformChars enter"));
    const jbyte* rc = (*pEnv->pOrgEnv)->GetStringPlatformChars(pEnv->pOrgEnv, op, a, b, c);
    dprintf(("npJRIEnvWrapper: npjridown_GetStringPlatformChars leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}


/**
 * DOWN Conversion structure.
 */
unsigned apfnJRIEnvDown[] = 
{
    0, /* void*   reserved0; */
    0, /* void*   reserved1; */
    0, /* void*   reserved2; */
    0, /* void*   reserved3; */
    (unsigned)npjridown_FindClass,
    (unsigned)npjridown_Throw,
    (unsigned)npjridown_ThrowNew,
    (unsigned)npjridown_ExceptionOccurred,
    (unsigned)npjridown_ExceptionDescribe,
    (unsigned)npjridown_ExceptionClear,
    (unsigned)npjridown_NewGlobalRef,
    (unsigned)npjridown_DisposeGlobalRef,
    (unsigned)npjridown_GetGlobalRef,
    (unsigned)npjridown_SetGlobalRef,
    (unsigned)npjridown_IsSameObject,
    (unsigned)npjridown_NewObject,
    (unsigned)npjridown_NewObjectV,
    (unsigned)npjridown_NewObjectA,
    (unsigned)npjridown_GetObjectClass,
    (unsigned)npjridown_IsInstanceOf,
    (unsigned)npjridown_GetMethodID,
    (unsigned)npjridown_CallMethod,
    (unsigned)npjridown_CallMethodV,
    (unsigned)npjridown_CallMethodA,
    (unsigned)npjridown_CallMethodBoolean,
    (unsigned)npjridown_CallMethodBooleanV,
    (unsigned)npjridown_CallMethodBooleanA,
    (unsigned)npjridown_CallMethodByte,
    (unsigned)npjridown_CallMethodByteV,
    (unsigned)npjridown_CallMethodByteA,
    (unsigned)npjridown_CallMethodChar,
    (unsigned)npjridown_CallMethodCharV,
    (unsigned)npjridown_CallMethodCharA,
    (unsigned)npjridown_CallMethodShort,
    (unsigned)npjridown_CallMethodShortV,
    (unsigned)npjridown_CallMethodShortA,
    (unsigned)npjridown_CallMethodInt,
    (unsigned)npjridown_CallMethodIntV,
    (unsigned)npjridown_CallMethodIntA,
    (unsigned)npjridown_CallMethodLong,
    (unsigned)npjridown_CallMethodLongV,
    (unsigned)npjridown_CallMethodLongA,
    (unsigned)npjridown_CallMethodFloat,
    (unsigned)npjridown_CallMethodFloatV,
    (unsigned)npjridown_CallMethodFloatA,
    (unsigned)npjridown_CallMethodDouble,
    (unsigned)npjridown_CallMethodDoubleV,
    (unsigned)npjridown_CallMethodDoubleA,
    (unsigned)npjridown_GetFieldID,
    (unsigned)npjridown_GetField,
    (unsigned)npjridown_GetFieldBoolean,
    (unsigned)npjridown_GetFieldByte,
    (unsigned)npjridown_GetFieldChar,
    (unsigned)npjridown_GetFieldShort,
    (unsigned)npjridown_GetFieldInt,
    (unsigned)npjridown_GetFieldLong,
    (unsigned)npjridown_GetFieldFloat,
    (unsigned)npjridown_GetFieldDouble,
    (unsigned)npjridown_SetField,
    (unsigned)npjridown_SetFieldBoolean,
    (unsigned)npjridown_SetFieldByte,
    (unsigned)npjridown_SetFieldChar,
    (unsigned)npjridown_SetFieldShort,
    (unsigned)npjridown_SetFieldInt,
    (unsigned)npjridown_SetFieldLong,
    (unsigned)npjridown_SetFieldFloat,
    (unsigned)npjridown_SetFieldDouble,
    (unsigned)npjridown_IsSubclassOf,
    (unsigned)npjridown_GetStaticMethodID,
    (unsigned)npjridown_CallStaticMethod,
    (unsigned)npjridown_CallStaticMethodV,
    (unsigned)npjridown_CallStaticMethodA,
    (unsigned)npjridown_CallStaticMethodBoolean,
    (unsigned)npjridown_CallStaticMethodBooleanV,
    (unsigned)npjridown_CallStaticMethodBooleanA,
    (unsigned)npjridown_CallStaticMethodByte,
    (unsigned)npjridown_CallStaticMethodByteV,
    (unsigned)npjridown_CallStaticMethodByteA,
    (unsigned)npjridown_CallStaticMethodChar,
    (unsigned)npjridown_CallStaticMethodCharV,
    (unsigned)npjridown_CallStaticMethodCharA,
    (unsigned)npjridown_CallStaticMethodShort,
    (unsigned)npjridown_CallStaticMethodShortV,
    (unsigned)npjridown_CallStaticMethodShortA,
    (unsigned)npjridown_CallStaticMethodInt,
    (unsigned)npjridown_CallStaticMethodIntV,
    (unsigned)npjridown_CallStaticMethodIntA,
    (unsigned)npjridown_CallStaticMethodLong,
    (unsigned)npjridown_CallStaticMethodLongV,
    (unsigned)npjridown_CallStaticMethodLongA,
    (unsigned)npjridown_CallStaticMethodFloat,
    (unsigned)npjridown_CallStaticMethodFloatV,
    (unsigned)npjridown_CallStaticMethodFloatA,
    (unsigned)npjridown_CallStaticMethodDouble,
    (unsigned)npjridown_CallStaticMethodDoubleV,
    (unsigned)npjridown_CallStaticMethodDoubleA,
    (unsigned)npjridown_GetStaticFieldID,
    (unsigned)npjridown_GetStaticField,
    (unsigned)npjridown_GetStaticFieldBoolean,
    (unsigned)npjridown_GetStaticFieldByte,
    (unsigned)npjridown_GetStaticFieldChar,
    (unsigned)npjridown_GetStaticFieldShort,
    (unsigned)npjridown_GetStaticFieldInt,
    (unsigned)npjridown_GetStaticFieldLong,
    (unsigned)npjridown_GetStaticFieldFloat,
    (unsigned)npjridown_GetStaticFieldDouble,
    (unsigned)npjridown_SetStaticField,
    (unsigned)npjridown_SetStaticFieldBoolean,
    (unsigned)npjridown_SetStaticFieldByte,
    (unsigned)npjridown_SetStaticFieldChar,
    (unsigned)npjridown_SetStaticFieldShort,
    (unsigned)npjridown_SetStaticFieldInt,
    (unsigned)npjridown_SetStaticFieldLong,
    (unsigned)npjridown_SetStaticFieldFloat,
    (unsigned)npjridown_SetStaticFieldDouble,
    (unsigned)npjridown_NewString,
    (unsigned)npjridown_GetStringLength,
    (unsigned)npjridown_GetStringChars,
    (unsigned)npjridown_NewStringUTF,
    (unsigned)npjridown_GetStringUTFLength,
    (unsigned)npjridown_GetStringUTFChars,
    (unsigned)npjridown_NewScalarArray,
    (unsigned)npjridown_GetScalarArrayLength,
    (unsigned)npjridown_GetScalarArrayElements,
    (unsigned)npjridown_NewObjectArray,
    (unsigned)npjridown_GetObjectArrayLength,
    (unsigned)npjridown_GetObjectArrayElement,
    (unsigned)npjridown_SetObjectArrayElement,
    (unsigned)npjridown_RegisterNatives,
    (unsigned)npjridown_UnregisterNatives,
    (unsigned)npjridown_DefineClass,
    (unsigned)npjridown_NewStringPlatform,
    (unsigned)npjridown_GetStringPlatformChars,
    /* add a bunch of blank entries just in case - can't be too careful... */
    0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
    0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
    0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
    0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0
};


