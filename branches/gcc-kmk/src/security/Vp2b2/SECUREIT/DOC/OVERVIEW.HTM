<HTML>
<HEAD>
  <TITLE>SecureIt - An overview</TITLE>
</HEAD>
<body background="backgrnd.gif" onLoad="parent.index.location.href='overview.inx'; return true">

<h1>SecureIt - An overview</h1>
<p>
This chapter is intended to give you an overview of the way SecureIt
works, and a step-by-step guide on how to use it.  For specific
information about API calls and utilities, please refer to the
sections
<a href="api.htm">explaining these in detail</a>.
<p>
A program protected using SecureIt's functions interacts with the
SecureIt DLL through the SecureIt APIs in various different ways
designed to give you maximum protection against piracy and integrating
SecureIt with your programs is a multi-step process that may seem
complicated at first.  The process has been devised based on careful
analysis of the process, both from the programmer's and from the
would-be pirate's point of view, and the methodology used is believed
to be quite secure.

<p>
The core functionality of SecureIt, the various utilities and setup files
can be illustrated as follows:
<p>
<img src="overview.gif" alt="Overview of SecureIt">

<h2><a name="think">Start by thinking about protection</h2>

<p>
The first step does not involve writing any code.  You should start by
reviewing the options available and decide what level and what kind of
protection you want to use in your program.  For the best security and
maximum flexibility, you should choose to user the optional serial
numbers, RSA encrypt the password strings, and use a variety of the
password protection fields available.  It is also important that you
review the section on security in this document, so you are familiar
with the various aspects of SecureIt, what parts are very secure and
what parts are more likely to be attacked by pirates.

<p>
With this in mind, you should define what data to include in encrypted
form in the program itself.  A special program for generating a
strongly encrypted blob of data containing vital information, strings
and code, GenData, is included in the SecureIt package.  For a
complete reference of how to set up and run GenData, please refer to
the appropriate section of this document.


<h2><a name="gendata">Configure <a href="gendata.htm">GenData</a></h2>

<p>
In the GenData configuration file, which by default has an extension
of .GEN, you should specify what data to include, how to encrypt it,
and what format to use for the data.  GenData can generate four kinds
of output data to make it easy to include the generated data in your
program, whether it is written in Pascal, C, REXX or another language.

<p>
The encryption algorithm uses the strong asymmetric RSA method, with
variable keylength defined by you.  You can choose a keylength of
either 64, 128, 256, 512 or 768 bits; 64 or 128 bits should be enough
for most purposes.  The RSA keylength you specify here will also be
used for encrypting the password data, if you want these to be
strongly encrypted as well.  SecureIt itself uses 128-bit encryption
of the GenData data and the passwords.

<p>
GenData allows you to specify ranges of serial numbers and associated
expiration dates.  Using this feature, you can specify that serial
numbers between 100 and 1000 expire on 1 July 1999, numbers between
1001 and 2000 expire on 5 June 2005, etc.

<p>
You can also specify specific locked-out serial numbers; this feature
is useful for later revisions of the software.  For example, consider
the situation where you release v1.0 of your SecureIt-protected
software.  Before releasing v1.1, a user who has bought your software
decides to publicise his (probably fake) name and associated password
on the Net, enabling other users to use the registered version of your
software without paying for it.  Before releasing the next version,
you add the serial number of his key to the LockOut list in GenData,
and the key with this serial number - although theoretically valid -
will not work with the new version.

<p>
Lastly, GenData allows you to include string constants in the
encrypted data block, which you can retrieve when your program runs
but are not included in plaintext form in the executable.  This is
useful if your program contains text strings that must not be
modified, such as Copyright strings, or if your program contains
strings that you do not wish to allow pirates to do plaintext searches
for, such as Registration messages.

<p>
Having configured GenData, you should run the program to generate an
RSA key and an include file for inclusion in your main program.
GenData has an option to read the RSA key from a file, so you can
maintain consistency and always use the same RSA key once it has been
generated once.  For more information about <a href="internal.htm#rsa">RSA</a>,
or <a href="internal.htm#secureitrsa">RSA used in SecureIt</a>, please
follow the links to the <a href="internal.htm">Internals</a> section.

<p>
The GenData output data is either a binary file which you must read
manually, or a C, Pascal or REXX style Include file defining a constant
data array.  In either case, a pointer to the data should be passed to
the SecureIt <a href="api.htm#KeySetup">KeySetup</a> API prior to making
any other SecureIt calls.


<h2><a name="makekey">Setting up <a href="makekey.htm">MakeKey</a></h2>

<p>
MakeKey is the password-generator for SecureIt, which allows you to
generate valid passwords for your SecureIt-protected program.  MakeKey
also is configured using a simple text file; in the case of MakeKey,
it has a default extension of .KEY.

<p>
In the MakeKey setup file, you define all the data that should be
stored in the encrypted password string, how it is to be encrypted,
how serial numbers should be generated, and how MakeKey actions should
be logged.  For a complete explanation of all the MakeKey keywords,
please refer to the <a href="makekey.htm#config">MakeKey Keywords</a> section.

<p>
Once you have set up MakeKey, you can generate passwords for your
program by running either <a href="makekey.htm#MkTxt">MkTxt</a>, the
text mode command line version of MakeKey, or by running <a
href="makekey.htm#MkPM">MkPM</a>, the Presentation Manager version of
it.


<h2><a name="MkClient">Generating a MakeKey Client</h2>

<p>
When you have completed writing your program and is confident that the
program works and the security features are well integrated, you
probably want to start selling your program.  Most shareware authors
do this by employing an agent, such as
<a href="http://www.bmtmicro.com" target="_top">BMT Micro</a>, who handles all
customer contact and should have the ability to generate valid
passwords for new users without you getting involved every time.

<p>
For security reasons, it is undesirable to give either the PM or the
Text mode version of MakeKey to your distributor.  Both of these
include the setup you use for encrypting the passwords, and even if
your distributor is a trustworthy person, he might misplace the files,
use an out of date configuration or otherwise make a mistake.  From my
point of view, to run the MakeKey program the distributor would have
to have a copy of your SecureIt registration key - and this also is
not desirable.

<p>
To solve this problem SecureIt offers you the ability to generate a
MakeKey PM client which does not require any external configuration
files or DLLs, and which can be limited to expire on a certain date.

<p>
MkPM can generate a <a href="makekey.htm#MkClient">MkClient</a>
executable based on a specific MakeKey setup, include the setup in the
generated executable, and generate an MkClient password that has no
relation to your own SecureIt registration.

<p>
The MkClient can be set up to output a
<a href="makekey.htm#reglogfile">checksummed log file</a>,
containing a detailed list of all passwords it has generated.  By
generating an MkClient that expires and outputs this log file, you
have as much control as it is possible to have over passwords
generated for your program.

<h3><a name="validate">Validating Checked Log Files</h3>
<p>
  To automate validation of Checked Log Files, SecureIt comes with a
  small utility for just this purpose: Validate.Exe.  Validate is a
  command/line utility, which takes the name of the log file as the
  parameter, and returns an error level optionally displays the result
  on screen as well.

<p>
  To run Validate, switch to a command line session and run Validate
  with the name of the log file as the parameter:

<pre>
  Validate MyApp.Log
</pre>

<p>
  Validate then responds with one of the following messages:

<pre>
  0 - Log file checksum for "MyApp.Log" is valid
  1 - ! Log file checksum for "MyApp.Log" is invalid; results are unreliable
  2 - ! The file "MyApp.Log" is probably not a Checked Log File
  3 - ! Cannot open the specified file "MyApp.Log".
</pre>

<p>
  Optionally, you can run Validate with a /Q parameter to suppress all
  messages that are normally written to screen and just use the return
  code set by Validate: 0, 1, 2 or 3, corresponding to the above
  messages.

</body>

