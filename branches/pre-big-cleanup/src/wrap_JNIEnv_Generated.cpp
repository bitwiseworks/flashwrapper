/* $Id: wrap_JNIEnv_Generated.cpp,v 1.1.1.1 2003/09/13 01:30:19 bird Exp $
 *
 * Autogenerated by npjnienv.cmd from npjnienv_mozjni.h.
 *
 * InnoTek Systemberatung GmbH confidential
 *
 * Copyright (c) 2003 InnoTek Systemberatung GmbH
 * Author: knut st. osmundsen <bird@anduin.net>
 *
 * All Rights Reserved
 *
 */



/**
 * GetVersion wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *GetVersion)
 *         (JNIEnv *env)
 */
jint __stdcall npjni_GetVersion(PNPJNIENV pEnv)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetVersion enter"));
    jint rc = pEnv->pOrgEnv->functions->GetVersion(pEnv->pOrgEnv);
    dprintf(("npJNIEnvWrapper: npjni_GetVersion leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * DefineClass wrapper.
 * 
 * Prototype:
 *     jclass (JNICALL *DefineClass)
 *         (JNIEnv *env, const char *name, jobject loader, const jbyte *buf, jsize len)
 */
jclass __stdcall npjni_DefineClass(PNPJNIENV pEnv, const char *name, jobject loader, const jbyte *buf, jsize len)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_DefineClass enter"));
    jclass rc = pEnv->pOrgEnv->functions->DefineClass(pEnv->pOrgEnv, name, loader, buf, len);
    dprintf(("npJNIEnvWrapper: npjni_DefineClass leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * FindClass wrapper.
 * 
 * Prototype:
 *     jclass (JNICALL *FindClass)
 *         (JNIEnv *env, const char *name)
 */
jclass __stdcall npjni_FindClass(PNPJNIENV pEnv, const char *name)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_FindClass enter"));
    jclass rc = pEnv->pOrgEnv->functions->FindClass(pEnv->pOrgEnv, name);
    dprintf(("npJNIEnvWrapper: npjni_FindClass leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * FromReflectedMethod wrapper.
 * 
 * Prototype:
 *     jmethodID (JNICALL *FromReflectedMethod)
 *         (JNIEnv *env, jobject method)
 */
jmethodID __stdcall npjni_FromReflectedMethod(PNPJNIENV pEnv, jobject method)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_FromReflectedMethod enter"));
    jmethodID rc = pEnv->pOrgEnv->functions->FromReflectedMethod(pEnv->pOrgEnv, method);
    dprintf(("npJNIEnvWrapper: npjni_FromReflectedMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * FromReflectedField wrapper.
 * 
 * Prototype:
 *     jfieldID (JNICALL *FromReflectedField)
 *         (JNIEnv *env, jobject field)
 */
jfieldID __stdcall npjni_FromReflectedField(PNPJNIENV pEnv, jobject field)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_FromReflectedField enter"));
    jfieldID rc = pEnv->pOrgEnv->functions->FromReflectedField(pEnv->pOrgEnv, field);
    dprintf(("npJNIEnvWrapper: npjni_FromReflectedField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * ToReflectedMethod wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *ToReflectedMethod)
 *         (JNIEnv *env, jclass cls, jmethodID methodID, jboolean isStatic)
 */
jobject __stdcall npjni_ToReflectedMethod(PNPJNIENV pEnv, jclass cls, jmethodID methodID, jboolean isStatic)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_ToReflectedMethod enter"));
    jobject rc = pEnv->pOrgEnv->functions->ToReflectedMethod(pEnv->pOrgEnv, cls, methodID, isStatic);
    dprintf(("npJNIEnvWrapper: npjni_ToReflectedMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetSuperclass wrapper.
 * 
 * Prototype:
 *     jclass (JNICALL *GetSuperclass)
 *         (JNIEnv *env, jclass sub)
 */
jclass __stdcall npjni_GetSuperclass(PNPJNIENV pEnv, jclass sub)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetSuperclass enter"));
    jclass rc = pEnv->pOrgEnv->functions->GetSuperclass(pEnv->pOrgEnv, sub);
    dprintf(("npJNIEnvWrapper: npjni_GetSuperclass leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * IsAssignableFrom wrapper.
 * 
 * Prototype:
 *     jboolean (JNICALL *IsAssignableFrom)
 *         (JNIEnv *env, jclass sub, jclass sup)
 */
jboolean __stdcall npjni_IsAssignableFrom(PNPJNIENV pEnv, jclass sub, jclass sup)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_IsAssignableFrom enter"));
    jboolean rc = pEnv->pOrgEnv->functions->IsAssignableFrom(pEnv->pOrgEnv, sub, sup);
    dprintf(("npJNIEnvWrapper: npjni_IsAssignableFrom leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * ToReflectedField wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *ToReflectedField)
 *         (JNIEnv *env, jclass cls, jfieldID fieldID, jboolean isStatic)
 */
jobject __stdcall npjni_ToReflectedField(PNPJNIENV pEnv, jclass cls, jfieldID fieldID, jboolean isStatic)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_ToReflectedField enter"));
    jobject rc = pEnv->pOrgEnv->functions->ToReflectedField(pEnv->pOrgEnv, cls, fieldID, isStatic);
    dprintf(("npJNIEnvWrapper: npjni_ToReflectedField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * Throw wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *Throw)
 *         (JNIEnv *env, jthrowable obj)
 */
jint __stdcall npjni_Throw(PNPJNIENV pEnv, jthrowable obj)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_Throw enter"));
    jint rc = pEnv->pOrgEnv->functions->Throw(pEnv->pOrgEnv, obj);
    dprintf(("npJNIEnvWrapper: npjni_Throw leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * ThrowNew wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *ThrowNew)
 *         (JNIEnv *env, jclass clazz, const char *msg)
 */
jint __stdcall npjni_ThrowNew(PNPJNIENV pEnv, jclass clazz, const char *msg)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_ThrowNew enter"));
    jint rc = pEnv->pOrgEnv->functions->ThrowNew(pEnv->pOrgEnv, clazz, msg);
    dprintf(("npJNIEnvWrapper: npjni_ThrowNew leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * ExceptionOccurred wrapper.
 * 
 * Prototype:
 *     jthrowable (JNICALL *ExceptionOccurred)
 *         (JNIEnv *env)
 */
jthrowable __stdcall npjni_ExceptionOccurred(PNPJNIENV pEnv)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_ExceptionOccurred enter"));
    jthrowable rc = pEnv->pOrgEnv->functions->ExceptionOccurred(pEnv->pOrgEnv);
    dprintf(("npJNIEnvWrapper: npjni_ExceptionOccurred leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * ExceptionDescribe wrapper.
 * 
 * Prototype:
 *     void (JNICALL *ExceptionDescribe)
 *         (JNIEnv *env)
 */
void __stdcall npjni_ExceptionDescribe(PNPJNIENV pEnv)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_ExceptionDescribe enter"));
    pEnv->pOrgEnv->functions->ExceptionDescribe(pEnv->pOrgEnv);
    dprintf(("npJNIEnvWrapper: npjni_ExceptionDescribe leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * ExceptionClear wrapper.
 * 
 * Prototype:
 *     void (JNICALL *ExceptionClear)
 *         (JNIEnv *env)
 */
void __stdcall npjni_ExceptionClear(PNPJNIENV pEnv)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_ExceptionClear enter"));
    pEnv->pOrgEnv->functions->ExceptionClear(pEnv->pOrgEnv);
    dprintf(("npJNIEnvWrapper: npjni_ExceptionClear leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * FatalError wrapper.
 * 
 * Prototype:
 *     void (JNICALL *FatalError)
 *         (JNIEnv *env, const char *msg)
 */
void __stdcall npjni_FatalError(PNPJNIENV pEnv, const char *msg)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_FatalError enter"));
    pEnv->pOrgEnv->functions->FatalError(pEnv->pOrgEnv, msg);
    dprintf(("npJNIEnvWrapper: npjni_FatalError leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * PushLocalFrame wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *PushLocalFrame)
 *         (JNIEnv *env, jint capacity)
 */
jint __stdcall npjni_PushLocalFrame(PNPJNIENV pEnv, jint capacity)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_PushLocalFrame enter"));
    jint rc = pEnv->pOrgEnv->functions->PushLocalFrame(pEnv->pOrgEnv, capacity);
    dprintf(("npJNIEnvWrapper: npjni_PushLocalFrame leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * PopLocalFrame wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *PopLocalFrame)
 *         (JNIEnv *env, jobject result)
 */
jobject __stdcall npjni_PopLocalFrame(PNPJNIENV pEnv, jobject result)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_PopLocalFrame enter"));
    jobject rc = pEnv->pOrgEnv->functions->PopLocalFrame(pEnv->pOrgEnv, result);
    dprintf(("npJNIEnvWrapper: npjni_PopLocalFrame leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewGlobalRef wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *NewGlobalRef)
 *         (JNIEnv *env, jobject lobj)
 */
jobject __stdcall npjni_NewGlobalRef(PNPJNIENV pEnv, jobject lobj)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_NewGlobalRef enter"));
    jobject rc = pEnv->pOrgEnv->functions->NewGlobalRef(pEnv->pOrgEnv, lobj);
    dprintf(("npJNIEnvWrapper: npjni_NewGlobalRef leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * DeleteGlobalRef wrapper.
 * 
 * Prototype:
 *     void (JNICALL *DeleteGlobalRef)
 *         (JNIEnv *env, jobject gref)
 */
void __stdcall npjni_DeleteGlobalRef(PNPJNIENV pEnv, jobject gref)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_DeleteGlobalRef enter"));
    pEnv->pOrgEnv->functions->DeleteGlobalRef(pEnv->pOrgEnv, gref);
    dprintf(("npJNIEnvWrapper: npjni_DeleteGlobalRef leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * DeleteLocalRef wrapper.
 * 
 * Prototype:
 *     void (JNICALL *DeleteLocalRef)
 *         (JNIEnv *env, jobject obj)
 */
void __stdcall npjni_DeleteLocalRef(PNPJNIENV pEnv, jobject obj)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_DeleteLocalRef enter"));
    pEnv->pOrgEnv->functions->DeleteLocalRef(pEnv->pOrgEnv, obj);
    dprintf(("npJNIEnvWrapper: npjni_DeleteLocalRef leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * IsSameObject wrapper.
 * 
 * Prototype:
 *     jboolean (JNICALL *IsSameObject)
 *         (JNIEnv *env, jobject obj1, jobject obj2)
 */
jboolean __stdcall npjni_IsSameObject(PNPJNIENV pEnv, jobject obj1, jobject obj2)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_IsSameObject enter"));
    jboolean rc = pEnv->pOrgEnv->functions->IsSameObject(pEnv->pOrgEnv, obj1, obj2);
    dprintf(("npJNIEnvWrapper: npjni_IsSameObject leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewLocalRef wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *NewLocalRef)
 *         (JNIEnv *env, jobject ref)
 */
jobject __stdcall npjni_NewLocalRef(PNPJNIENV pEnv, jobject ref)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_NewLocalRef enter"));
    jobject rc = pEnv->pOrgEnv->functions->NewLocalRef(pEnv->pOrgEnv, ref);
    dprintf(("npJNIEnvWrapper: npjni_NewLocalRef leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * EnsureLocalCapacity wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *EnsureLocalCapacity)
 *         (JNIEnv *env, jint capacity)
 */
jint __stdcall npjni_EnsureLocalCapacity(PNPJNIENV pEnv, jint capacity)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_EnsureLocalCapacity enter"));
    jint rc = pEnv->pOrgEnv->functions->EnsureLocalCapacity(pEnv->pOrgEnv, capacity);
    dprintf(("npJNIEnvWrapper: npjni_EnsureLocalCapacity leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * AllocObject wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *AllocObject)
 *         (JNIEnv *env, jclass clazz)
 */
jobject __stdcall npjni_AllocObject(PNPJNIENV pEnv, jclass clazz)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_AllocObject enter"));
    jobject rc = pEnv->pOrgEnv->functions->AllocObject(pEnv->pOrgEnv, clazz);
    dprintf(("npJNIEnvWrapper: npjni_AllocObject leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewObject wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *NewObject)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, ...)
 */
jobject __stdcall npjni_NewObject(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_NewObject enter"));
    jobject rc = pEnv->pOrgEnv->functions->NewObjectV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_NewObject leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewObjectV wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *NewObjectV)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args)
 */
jobject __stdcall npjni_NewObjectV(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_NewObjectV enter"));
    jobject rc = pEnv->pOrgEnv->functions->NewObjectV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_NewObjectV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewObjectA wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *NewObjectA)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args)
 */
jobject __stdcall npjni_NewObjectA(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_NewObjectA enter"));
    jobject rc = pEnv->pOrgEnv->functions->NewObjectA(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_NewObjectA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetObjectClass wrapper.
 * 
 * Prototype:
 *     jclass (JNICALL *GetObjectClass)
 *         (JNIEnv *env, jobject obj)
 */
jclass __stdcall npjni_GetObjectClass(PNPJNIENV pEnv, jobject obj)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetObjectClass enter"));
    jclass rc = pEnv->pOrgEnv->functions->GetObjectClass(pEnv->pOrgEnv, obj);
    dprintf(("npJNIEnvWrapper: npjni_GetObjectClass leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * IsInstanceOf wrapper.
 * 
 * Prototype:
 *     jboolean (JNICALL *IsInstanceOf)
 *         (JNIEnv *env, jobject obj, jclass clazz)
 */
jboolean __stdcall npjni_IsInstanceOf(PNPJNIENV pEnv, jobject obj, jclass clazz)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_IsInstanceOf enter"));
    jboolean rc = pEnv->pOrgEnv->functions->IsInstanceOf(pEnv->pOrgEnv, obj, clazz);
    dprintf(("npJNIEnvWrapper: npjni_IsInstanceOf leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetMethodID wrapper.
 * 
 * Prototype:
 *     jmethodID (JNICALL *GetMethodID)
 *         (JNIEnv *env, jclass clazz, const char *name, const char *sig)
 */
jmethodID __stdcall npjni_GetMethodID(PNPJNIENV pEnv, jclass clazz, const char *name, const char *sig)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetMethodID enter"));
    jmethodID rc = pEnv->pOrgEnv->functions->GetMethodID(pEnv->pOrgEnv, clazz, name, sig);
    dprintf(("npJNIEnvWrapper: npjni_GetMethodID leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallObjectMethod wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *CallObjectMethod)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, ...)
 */
jobject __stdcall npjni_CallObjectMethod(PNPJNIENV pEnv, jobject obj, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallObjectMethod enter"));
    jobject rc = pEnv->pOrgEnv->functions->CallObjectMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallObjectMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallObjectMethodV wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *CallObjectMethodV)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, va_list args)
 */
jobject __stdcall npjni_CallObjectMethodV(PNPJNIENV pEnv, jobject obj, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallObjectMethodV enter"));
    jobject rc = pEnv->pOrgEnv->functions->CallObjectMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallObjectMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallObjectMethodA wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *CallObjectMethodA)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, jvalue * args)
 */
jobject __stdcall npjni_CallObjectMethodA(PNPJNIENV pEnv, jobject obj, jmethodID methodID, jvalue * args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallObjectMethodA enter"));
    jobject rc = pEnv->pOrgEnv->functions->CallObjectMethodA(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallObjectMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallBooleanMethod wrapper.
 * 
 * Prototype:
 *     jboolean (JNICALL *CallBooleanMethod)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, ...)
 */
jboolean __stdcall npjni_CallBooleanMethod(PNPJNIENV pEnv, jobject obj, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallBooleanMethod enter"));
    jboolean rc = pEnv->pOrgEnv->functions->CallBooleanMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallBooleanMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallBooleanMethodV wrapper.
 * 
 * Prototype:
 *     jboolean (JNICALL *CallBooleanMethodV)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, va_list args)
 */
jboolean __stdcall npjni_CallBooleanMethodV(PNPJNIENV pEnv, jobject obj, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallBooleanMethodV enter"));
    jboolean rc = pEnv->pOrgEnv->functions->CallBooleanMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallBooleanMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallBooleanMethodA wrapper.
 * 
 * Prototype:
 *     jboolean (JNICALL *CallBooleanMethodA)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, jvalue * args)
 */
jboolean __stdcall npjni_CallBooleanMethodA(PNPJNIENV pEnv, jobject obj, jmethodID methodID, jvalue * args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallBooleanMethodA enter"));
    jboolean rc = pEnv->pOrgEnv->functions->CallBooleanMethodA(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallBooleanMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallByteMethod wrapper.
 * 
 * Prototype:
 *     jbyte (JNICALL *CallByteMethod)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, ...)
 */
jbyte __stdcall npjni_CallByteMethod(PNPJNIENV pEnv, jobject obj, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallByteMethod enter"));
    jbyte rc = pEnv->pOrgEnv->functions->CallByteMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallByteMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallByteMethodV wrapper.
 * 
 * Prototype:
 *     jbyte (JNICALL *CallByteMethodV)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, va_list args)
 */
jbyte __stdcall npjni_CallByteMethodV(PNPJNIENV pEnv, jobject obj, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallByteMethodV enter"));
    jbyte rc = pEnv->pOrgEnv->functions->CallByteMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallByteMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallByteMethodA wrapper.
 * 
 * Prototype:
 *     jbyte (JNICALL *CallByteMethodA)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args)
 */
jbyte __stdcall npjni_CallByteMethodA(PNPJNIENV pEnv, jobject obj, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallByteMethodA enter"));
    jbyte rc = pEnv->pOrgEnv->functions->CallByteMethodA(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallByteMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallCharMethod wrapper.
 * 
 * Prototype:
 *     jchar (JNICALL *CallCharMethod)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, ...)
 */
jchar __stdcall npjni_CallCharMethod(PNPJNIENV pEnv, jobject obj, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallCharMethod enter"));
    jchar rc = pEnv->pOrgEnv->functions->CallCharMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallCharMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallCharMethodV wrapper.
 * 
 * Prototype:
 *     jchar (JNICALL *CallCharMethodV)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, va_list args)
 */
jchar __stdcall npjni_CallCharMethodV(PNPJNIENV pEnv, jobject obj, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallCharMethodV enter"));
    jchar rc = pEnv->pOrgEnv->functions->CallCharMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallCharMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallCharMethodA wrapper.
 * 
 * Prototype:
 *     jchar (JNICALL *CallCharMethodA)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args)
 */
jchar __stdcall npjni_CallCharMethodA(PNPJNIENV pEnv, jobject obj, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallCharMethodA enter"));
    jchar rc = pEnv->pOrgEnv->functions->CallCharMethodA(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallCharMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallShortMethod wrapper.
 * 
 * Prototype:
 *     jshort (JNICALL *CallShortMethod)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, ...)
 */
jshort __stdcall npjni_CallShortMethod(PNPJNIENV pEnv, jobject obj, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallShortMethod enter"));
    jshort rc = pEnv->pOrgEnv->functions->CallShortMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallShortMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallShortMethodV wrapper.
 * 
 * Prototype:
 *     jshort (JNICALL *CallShortMethodV)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, va_list args)
 */
jshort __stdcall npjni_CallShortMethodV(PNPJNIENV pEnv, jobject obj, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallShortMethodV enter"));
    jshort rc = pEnv->pOrgEnv->functions->CallShortMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallShortMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallShortMethodA wrapper.
 * 
 * Prototype:
 *     jshort (JNICALL *CallShortMethodA)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args)
 */
jshort __stdcall npjni_CallShortMethodA(PNPJNIENV pEnv, jobject obj, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallShortMethodA enter"));
    jshort rc = pEnv->pOrgEnv->functions->CallShortMethodA(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallShortMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallIntMethod wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *CallIntMethod)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, ...)
 */
jint __stdcall npjni_CallIntMethod(PNPJNIENV pEnv, jobject obj, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallIntMethod enter"));
    jint rc = pEnv->pOrgEnv->functions->CallIntMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallIntMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallIntMethodV wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *CallIntMethodV)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, va_list args)
 */
jint __stdcall npjni_CallIntMethodV(PNPJNIENV pEnv, jobject obj, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallIntMethodV enter"));
    jint rc = pEnv->pOrgEnv->functions->CallIntMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallIntMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallIntMethodA wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *CallIntMethodA)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args)
 */
jint __stdcall npjni_CallIntMethodA(PNPJNIENV pEnv, jobject obj, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallIntMethodA enter"));
    jint rc = pEnv->pOrgEnv->functions->CallIntMethodA(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallIntMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallLongMethod wrapper.
 * 
 * Prototype:
 *     jlong (JNICALL *CallLongMethod)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, ...)
 */
long long __stdcall npjni_CallLongMethod(PNPJNIENV pEnv, jobject obj, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallLongMethod enter"));
    jlong llRc = pEnv->pOrgEnv->functions->CallLongMethodV(pEnv->pOrgEnv, obj, methodID, args);
#if NO_LONG_LONG
    dprintf(("npJNIEnvWrapper: npjni_CallLongMethod leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJNIEnvWrapper: npjni_CallLongMethod leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * CallLongMethodV wrapper.
 * 
 * Prototype:
 *     jlong (JNICALL *CallLongMethodV)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, va_list args)
 */
long long __stdcall npjni_CallLongMethodV(PNPJNIENV pEnv, jobject obj, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallLongMethodV enter"));
    jlong llRc = pEnv->pOrgEnv->functions->CallLongMethodV(pEnv->pOrgEnv, obj, methodID, args);
#if NO_LONG_LONG
    dprintf(("npJNIEnvWrapper: npjni_CallLongMethodV leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJNIEnvWrapper: npjni_CallLongMethodV leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * CallLongMethodA wrapper.
 * 
 * Prototype:
 *     jlong (JNICALL *CallLongMethodA)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args)
 */
long long __stdcall npjni_CallLongMethodA(PNPJNIENV pEnv, jobject obj, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallLongMethodA enter"));
    jlong llRc = pEnv->pOrgEnv->functions->CallLongMethodA(pEnv->pOrgEnv, obj, methodID, args);
#if NO_LONG_LONG
    dprintf(("npJNIEnvWrapper: npjni_CallLongMethodA leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJNIEnvWrapper: npjni_CallLongMethodA leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * CallFloatMethod wrapper.
 * 
 * Prototype:
 *     jfloat (JNICALL *CallFloatMethod)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, ...)
 */
jfloat __stdcall npjni_CallFloatMethod(PNPJNIENV pEnv, jobject obj, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallFloatMethod enter"));
    jfloat rc = pEnv->pOrgEnv->functions->CallFloatMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallFloatMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallFloatMethodV wrapper.
 * 
 * Prototype:
 *     jfloat (JNICALL *CallFloatMethodV)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, va_list args)
 */
jfloat __stdcall npjni_CallFloatMethodV(PNPJNIENV pEnv, jobject obj, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallFloatMethodV enter"));
    jfloat rc = pEnv->pOrgEnv->functions->CallFloatMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallFloatMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallFloatMethodA wrapper.
 * 
 * Prototype:
 *     jfloat (JNICALL *CallFloatMethodA)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args)
 */
jfloat __stdcall npjni_CallFloatMethodA(PNPJNIENV pEnv, jobject obj, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallFloatMethodA enter"));
    jfloat rc = pEnv->pOrgEnv->functions->CallFloatMethodA(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallFloatMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallDoubleMethod wrapper.
 * 
 * Prototype:
 *     jdouble (JNICALL *CallDoubleMethod)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, ...)
 */
jdouble __stdcall npjni_CallDoubleMethod(PNPJNIENV pEnv, jobject obj, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallDoubleMethod enter"));
    jdouble rdRc = pEnv->pOrgEnv->functions->CallDoubleMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallDoubleMethod leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * CallDoubleMethodV wrapper.
 * 
 * Prototype:
 *     jdouble (JNICALL *CallDoubleMethodV)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, va_list args)
 */
jdouble __stdcall npjni_CallDoubleMethodV(PNPJNIENV pEnv, jobject obj, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallDoubleMethodV enter"));
    jdouble rdRc = pEnv->pOrgEnv->functions->CallDoubleMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallDoubleMethodV leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * CallDoubleMethodA wrapper.
 * 
 * Prototype:
 *     jdouble (JNICALL *CallDoubleMethodA)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, jvalue *args)
 */
jdouble __stdcall npjni_CallDoubleMethodA(PNPJNIENV pEnv, jobject obj, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallDoubleMethodA enter"));
    jdouble rdRc = pEnv->pOrgEnv->functions->CallDoubleMethodA(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallDoubleMethodA leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * CallVoidMethod wrapper.
 * 
 * Prototype:
 *     void (JNICALL *CallVoidMethod)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, ...)
 */
void __stdcall npjni_CallVoidMethod(PNPJNIENV pEnv, jobject obj, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallVoidMethod enter"));
    pEnv->pOrgEnv->functions->CallVoidMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallVoidMethod leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * CallVoidMethodV wrapper.
 * 
 * Prototype:
 *     void (JNICALL *CallVoidMethodV)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, va_list args)
 */
void __stdcall npjni_CallVoidMethodV(PNPJNIENV pEnv, jobject obj, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallVoidMethodV enter"));
    pEnv->pOrgEnv->functions->CallVoidMethodV(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallVoidMethodV leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * CallVoidMethodA wrapper.
 * 
 * Prototype:
 *     void (JNICALL *CallVoidMethodA)
 *         (JNIEnv *env, jobject obj, jmethodID methodID, jvalue * args)
 */
void __stdcall npjni_CallVoidMethodA(PNPJNIENV pEnv, jobject obj, jmethodID methodID, jvalue * args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallVoidMethodA enter"));
    pEnv->pOrgEnv->functions->CallVoidMethodA(pEnv->pOrgEnv, obj, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallVoidMethodA leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * CallNonvirtualObjectMethod wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *CallNonvirtualObjectMethod)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...)
 */
jobject __stdcall npjni_CallNonvirtualObjectMethod(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualObjectMethod enter"));
    jobject rc = pEnv->pOrgEnv->functions->CallNonvirtualObjectMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualObjectMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualObjectMethodV wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *CallNonvirtualObjectMethodV)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, va_list args)
 */
jobject __stdcall npjni_CallNonvirtualObjectMethodV(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualObjectMethodV enter"));
    jobject rc = pEnv->pOrgEnv->functions->CallNonvirtualObjectMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualObjectMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualObjectMethodA wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *CallNonvirtualObjectMethodA)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, jvalue * args)
 */
jobject __stdcall npjni_CallNonvirtualObjectMethodA(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, jvalue * args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualObjectMethodA enter"));
    jobject rc = pEnv->pOrgEnv->functions->CallNonvirtualObjectMethodA(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualObjectMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualBooleanMethod wrapper.
 * 
 * Prototype:
 *     jboolean (JNICALL *CallNonvirtualBooleanMethod)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...)
 */
jboolean __stdcall npjni_CallNonvirtualBooleanMethod(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualBooleanMethod enter"));
    jboolean rc = pEnv->pOrgEnv->functions->CallNonvirtualBooleanMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualBooleanMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualBooleanMethodV wrapper.
 * 
 * Prototype:
 *     jboolean (JNICALL *CallNonvirtualBooleanMethodV)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, va_list args)
 */
jboolean __stdcall npjni_CallNonvirtualBooleanMethodV(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualBooleanMethodV enter"));
    jboolean rc = pEnv->pOrgEnv->functions->CallNonvirtualBooleanMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualBooleanMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualBooleanMethodA wrapper.
 * 
 * Prototype:
 *     jboolean (JNICALL *CallNonvirtualBooleanMethodA)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, jvalue * args)
 */
jboolean __stdcall npjni_CallNonvirtualBooleanMethodA(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, jvalue * args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualBooleanMethodA enter"));
    jboolean rc = pEnv->pOrgEnv->functions->CallNonvirtualBooleanMethodA(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualBooleanMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualByteMethod wrapper.
 * 
 * Prototype:
 *     jbyte (JNICALL *CallNonvirtualByteMethod)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...)
 */
jbyte __stdcall npjni_CallNonvirtualByteMethod(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualByteMethod enter"));
    jbyte rc = pEnv->pOrgEnv->functions->CallNonvirtualByteMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualByteMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualByteMethodV wrapper.
 * 
 * Prototype:
 *     jbyte (JNICALL *CallNonvirtualByteMethodV)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, va_list args)
 */
jbyte __stdcall npjni_CallNonvirtualByteMethodV(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualByteMethodV enter"));
    jbyte rc = pEnv->pOrgEnv->functions->CallNonvirtualByteMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualByteMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualByteMethodA wrapper.
 * 
 * Prototype:
 *     jbyte (JNICALL *CallNonvirtualByteMethodA)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, jvalue *args)
 */
jbyte __stdcall npjni_CallNonvirtualByteMethodA(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualByteMethodA enter"));
    jbyte rc = pEnv->pOrgEnv->functions->CallNonvirtualByteMethodA(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualByteMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualCharMethod wrapper.
 * 
 * Prototype:
 *     jchar (JNICALL *CallNonvirtualCharMethod)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...)
 */
jchar __stdcall npjni_CallNonvirtualCharMethod(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualCharMethod enter"));
    jchar rc = pEnv->pOrgEnv->functions->CallNonvirtualCharMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualCharMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualCharMethodV wrapper.
 * 
 * Prototype:
 *     jchar (JNICALL *CallNonvirtualCharMethodV)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, va_list args)
 */
jchar __stdcall npjni_CallNonvirtualCharMethodV(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualCharMethodV enter"));
    jchar rc = pEnv->pOrgEnv->functions->CallNonvirtualCharMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualCharMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualCharMethodA wrapper.
 * 
 * Prototype:
 *     jchar (JNICALL *CallNonvirtualCharMethodA)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, jvalue *args)
 */
jchar __stdcall npjni_CallNonvirtualCharMethodA(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualCharMethodA enter"));
    jchar rc = pEnv->pOrgEnv->functions->CallNonvirtualCharMethodA(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualCharMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualShortMethod wrapper.
 * 
 * Prototype:
 *     jshort (JNICALL *CallNonvirtualShortMethod)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...)
 */
jshort __stdcall npjni_CallNonvirtualShortMethod(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualShortMethod enter"));
    jshort rc = pEnv->pOrgEnv->functions->CallNonvirtualShortMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualShortMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualShortMethodV wrapper.
 * 
 * Prototype:
 *     jshort (JNICALL *CallNonvirtualShortMethodV)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, va_list args)
 */
jshort __stdcall npjni_CallNonvirtualShortMethodV(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualShortMethodV enter"));
    jshort rc = pEnv->pOrgEnv->functions->CallNonvirtualShortMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualShortMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualShortMethodA wrapper.
 * 
 * Prototype:
 *     jshort (JNICALL *CallNonvirtualShortMethodA)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, jvalue *args)
 */
jshort __stdcall npjni_CallNonvirtualShortMethodA(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualShortMethodA enter"));
    jshort rc = pEnv->pOrgEnv->functions->CallNonvirtualShortMethodA(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualShortMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualIntMethod wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *CallNonvirtualIntMethod)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...)
 */
jint __stdcall npjni_CallNonvirtualIntMethod(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualIntMethod enter"));
    jint rc = pEnv->pOrgEnv->functions->CallNonvirtualIntMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualIntMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualIntMethodV wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *CallNonvirtualIntMethodV)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, va_list args)
 */
jint __stdcall npjni_CallNonvirtualIntMethodV(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualIntMethodV enter"));
    jint rc = pEnv->pOrgEnv->functions->CallNonvirtualIntMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualIntMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualIntMethodA wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *CallNonvirtualIntMethodA)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, jvalue *args)
 */
jint __stdcall npjni_CallNonvirtualIntMethodA(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualIntMethodA enter"));
    jint rc = pEnv->pOrgEnv->functions->CallNonvirtualIntMethodA(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualIntMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualLongMethod wrapper.
 * 
 * Prototype:
 *     jlong (JNICALL *CallNonvirtualLongMethod)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...)
 */
long long __stdcall npjni_CallNonvirtualLongMethod(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualLongMethod enter"));
    jlong llRc = pEnv->pOrgEnv->functions->CallNonvirtualLongMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
#if NO_LONG_LONG
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualLongMethod leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualLongMethod leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * CallNonvirtualLongMethodV wrapper.
 * 
 * Prototype:
 *     jlong (JNICALL *CallNonvirtualLongMethodV)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, va_list args)
 */
long long __stdcall npjni_CallNonvirtualLongMethodV(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualLongMethodV enter"));
    jlong llRc = pEnv->pOrgEnv->functions->CallNonvirtualLongMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
#if NO_LONG_LONG
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualLongMethodV leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualLongMethodV leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * CallNonvirtualLongMethodA wrapper.
 * 
 * Prototype:
 *     jlong (JNICALL *CallNonvirtualLongMethodA)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, jvalue *args)
 */
long long __stdcall npjni_CallNonvirtualLongMethodA(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualLongMethodA enter"));
    jlong llRc = pEnv->pOrgEnv->functions->CallNonvirtualLongMethodA(pEnv->pOrgEnv, obj, clazz, methodID, args);
#if NO_LONG_LONG
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualLongMethodA leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualLongMethodA leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * CallNonvirtualFloatMethod wrapper.
 * 
 * Prototype:
 *     jfloat (JNICALL *CallNonvirtualFloatMethod)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...)
 */
jfloat __stdcall npjni_CallNonvirtualFloatMethod(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualFloatMethod enter"));
    jfloat rc = pEnv->pOrgEnv->functions->CallNonvirtualFloatMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualFloatMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualFloatMethodV wrapper.
 * 
 * Prototype:
 *     jfloat (JNICALL *CallNonvirtualFloatMethodV)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, va_list args)
 */
jfloat __stdcall npjni_CallNonvirtualFloatMethodV(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualFloatMethodV enter"));
    jfloat rc = pEnv->pOrgEnv->functions->CallNonvirtualFloatMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualFloatMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualFloatMethodA wrapper.
 * 
 * Prototype:
 *     jfloat (JNICALL *CallNonvirtualFloatMethodA)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, jvalue *args)
 */
jfloat __stdcall npjni_CallNonvirtualFloatMethodA(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualFloatMethodA enter"));
    jfloat rc = pEnv->pOrgEnv->functions->CallNonvirtualFloatMethodA(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualFloatMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallNonvirtualDoubleMethod wrapper.
 * 
 * Prototype:
 *     jdouble (JNICALL *CallNonvirtualDoubleMethod)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...)
 */
jdouble __stdcall npjni_CallNonvirtualDoubleMethod(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualDoubleMethod enter"));
    jdouble rdRc = pEnv->pOrgEnv->functions->CallNonvirtualDoubleMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualDoubleMethod leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * CallNonvirtualDoubleMethodV wrapper.
 * 
 * Prototype:
 *     jdouble (JNICALL *CallNonvirtualDoubleMethodV)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, va_list args)
 */
jdouble __stdcall npjni_CallNonvirtualDoubleMethodV(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualDoubleMethodV enter"));
    jdouble rdRc = pEnv->pOrgEnv->functions->CallNonvirtualDoubleMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualDoubleMethodV leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * CallNonvirtualDoubleMethodA wrapper.
 * 
 * Prototype:
 *     jdouble (JNICALL *CallNonvirtualDoubleMethodA)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, jvalue *args)
 */
jdouble __stdcall npjni_CallNonvirtualDoubleMethodA(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualDoubleMethodA enter"));
    jdouble rdRc = pEnv->pOrgEnv->functions->CallNonvirtualDoubleMethodA(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualDoubleMethodA leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * CallNonvirtualVoidMethod wrapper.
 * 
 * Prototype:
 *     void (JNICALL *CallNonvirtualVoidMethod)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, ...)
 */
void __stdcall npjni_CallNonvirtualVoidMethod(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualVoidMethod enter"));
    pEnv->pOrgEnv->functions->CallNonvirtualVoidMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualVoidMethod leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * CallNonvirtualVoidMethodV wrapper.
 * 
 * Prototype:
 *     void (JNICALL *CallNonvirtualVoidMethodV)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, va_list args)
 */
void __stdcall npjni_CallNonvirtualVoidMethodV(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualVoidMethodV enter"));
    pEnv->pOrgEnv->functions->CallNonvirtualVoidMethodV(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualVoidMethodV leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * CallNonvirtualVoidMethodA wrapper.
 * 
 * Prototype:
 *     void (JNICALL *CallNonvirtualVoidMethodA)
 *         (JNIEnv *env, jobject obj, jclass clazz, jmethodID methodID, jvalue * args)
 */
void __stdcall npjni_CallNonvirtualVoidMethodA(PNPJNIENV pEnv, jobject obj, jclass clazz, jmethodID methodID, jvalue * args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualVoidMethodA enter"));
    pEnv->pOrgEnv->functions->CallNonvirtualVoidMethodA(pEnv->pOrgEnv, obj, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallNonvirtualVoidMethodA leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * GetFieldID wrapper.
 * 
 * Prototype:
 *     jfieldID (JNICALL *GetFieldID)
 *         (JNIEnv *env, jclass clazz, const char *name, const char *sig)
 */
jfieldID __stdcall npjni_GetFieldID(PNPJNIENV pEnv, jclass clazz, const char *name, const char *sig)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetFieldID enter"));
    jfieldID rc = pEnv->pOrgEnv->functions->GetFieldID(pEnv->pOrgEnv, clazz, name, sig);
    dprintf(("npJNIEnvWrapper: npjni_GetFieldID leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetObjectField wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *GetObjectField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID)
 */
jobject __stdcall npjni_GetObjectField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetObjectField enter"));
    jobject rc = pEnv->pOrgEnv->functions->GetObjectField(pEnv->pOrgEnv, obj, fieldID);
    dprintf(("npJNIEnvWrapper: npjni_GetObjectField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetBooleanField wrapper.
 * 
 * Prototype:
 *     jboolean (JNICALL *GetBooleanField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID)
 */
jboolean __stdcall npjni_GetBooleanField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetBooleanField enter"));
    jboolean rc = pEnv->pOrgEnv->functions->GetBooleanField(pEnv->pOrgEnv, obj, fieldID);
    dprintf(("npJNIEnvWrapper: npjni_GetBooleanField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetByteField wrapper.
 * 
 * Prototype:
 *     jbyte (JNICALL *GetByteField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID)
 */
jbyte __stdcall npjni_GetByteField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetByteField enter"));
    jbyte rc = pEnv->pOrgEnv->functions->GetByteField(pEnv->pOrgEnv, obj, fieldID);
    dprintf(("npJNIEnvWrapper: npjni_GetByteField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetCharField wrapper.
 * 
 * Prototype:
 *     jchar (JNICALL *GetCharField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID)
 */
jchar __stdcall npjni_GetCharField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetCharField enter"));
    jchar rc = pEnv->pOrgEnv->functions->GetCharField(pEnv->pOrgEnv, obj, fieldID);
    dprintf(("npJNIEnvWrapper: npjni_GetCharField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetShortField wrapper.
 * 
 * Prototype:
 *     jshort (JNICALL *GetShortField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID)
 */
jshort __stdcall npjni_GetShortField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetShortField enter"));
    jshort rc = pEnv->pOrgEnv->functions->GetShortField(pEnv->pOrgEnv, obj, fieldID);
    dprintf(("npJNIEnvWrapper: npjni_GetShortField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetIntField wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *GetIntField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID)
 */
jint __stdcall npjni_GetIntField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetIntField enter"));
    jint rc = pEnv->pOrgEnv->functions->GetIntField(pEnv->pOrgEnv, obj, fieldID);
    dprintf(("npJNIEnvWrapper: npjni_GetIntField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetLongField wrapper.
 * 
 * Prototype:
 *     jlong (JNICALL *GetLongField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID)
 */
long long __stdcall npjni_GetLongField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetLongField enter"));
    jlong llRc = pEnv->pOrgEnv->functions->GetLongField(pEnv->pOrgEnv, obj, fieldID);
#if NO_LONG_LONG
    dprintf(("npJNIEnvWrapper: npjni_GetLongField leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJNIEnvWrapper: npjni_GetLongField leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * GetFloatField wrapper.
 * 
 * Prototype:
 *     jfloat (JNICALL *GetFloatField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID)
 */
jfloat __stdcall npjni_GetFloatField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetFloatField enter"));
    jfloat rc = pEnv->pOrgEnv->functions->GetFloatField(pEnv->pOrgEnv, obj, fieldID);
    dprintf(("npJNIEnvWrapper: npjni_GetFloatField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetDoubleField wrapper.
 * 
 * Prototype:
 *     jdouble (JNICALL *GetDoubleField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID)
 */
jdouble __stdcall npjni_GetDoubleField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetDoubleField enter"));
    jdouble rdRc = pEnv->pOrgEnv->functions->GetDoubleField(pEnv->pOrgEnv, obj, fieldID);
    dprintf(("npJNIEnvWrapper: npjni_GetDoubleField leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * SetObjectField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetObjectField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID, jobject val)
 */
void __stdcall npjni_SetObjectField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID, jobject val)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetObjectField enter"));
    pEnv->pOrgEnv->functions->SetObjectField(pEnv->pOrgEnv, obj, fieldID, val);
    dprintf(("npJNIEnvWrapper: npjni_SetObjectField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetBooleanField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetBooleanField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID, jboolean val)
 */
void __stdcall npjni_SetBooleanField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID, jboolean val)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetBooleanField enter"));
    pEnv->pOrgEnv->functions->SetBooleanField(pEnv->pOrgEnv, obj, fieldID, val);
    dprintf(("npJNIEnvWrapper: npjni_SetBooleanField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetByteField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetByteField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID, jbyte val)
 */
void __stdcall npjni_SetByteField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID, jbyte val)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetByteField enter"));
    pEnv->pOrgEnv->functions->SetByteField(pEnv->pOrgEnv, obj, fieldID, val);
    dprintf(("npJNIEnvWrapper: npjni_SetByteField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetCharField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetCharField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID, jchar val)
 */
void __stdcall npjni_SetCharField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID, jchar val)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetCharField enter"));
    pEnv->pOrgEnv->functions->SetCharField(pEnv->pOrgEnv, obj, fieldID, val);
    dprintf(("npJNIEnvWrapper: npjni_SetCharField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetShortField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetShortField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID, jshort val)
 */
void __stdcall npjni_SetShortField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID, jshort val)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetShortField enter"));
    pEnv->pOrgEnv->functions->SetShortField(pEnv->pOrgEnv, obj, fieldID, val);
    dprintf(("npJNIEnvWrapper: npjni_SetShortField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetIntField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetIntField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID, jint val)
 */
void __stdcall npjni_SetIntField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID, jint val)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetIntField enter"));
    pEnv->pOrgEnv->functions->SetIntField(pEnv->pOrgEnv, obj, fieldID, val);
    dprintf(("npJNIEnvWrapper: npjni_SetIntField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetLongField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetLongField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID, jlong val)
 */
void __stdcall npjni_SetLongField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID, jlong val)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetLongField enter"));
    pEnv->pOrgEnv->functions->SetLongField(pEnv->pOrgEnv, obj, fieldID, val);
    dprintf(("npJNIEnvWrapper: npjni_SetLongField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetFloatField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetFloatField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID, jfloat val)
 */
void __stdcall npjni_SetFloatField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID, jfloat val)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetFloatField enter"));
    pEnv->pOrgEnv->functions->SetFloatField(pEnv->pOrgEnv, obj, fieldID, val);
    dprintf(("npJNIEnvWrapper: npjni_SetFloatField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetDoubleField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetDoubleField)
 *         (JNIEnv *env, jobject obj, jfieldID fieldID, jdouble val)
 */
void __stdcall npjni_SetDoubleField(PNPJNIENV pEnv, jobject obj, jfieldID fieldID, jdouble val)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetDoubleField enter"));
    pEnv->pOrgEnv->functions->SetDoubleField(pEnv->pOrgEnv, obj, fieldID, val);
    dprintf(("npJNIEnvWrapper: npjni_SetDoubleField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * GetStaticMethodID wrapper.
 * 
 * Prototype:
 *     jmethodID (JNICALL *GetStaticMethodID)
 *         (JNIEnv *env, jclass clazz, const char *name, const char *sig)
 */
jmethodID __stdcall npjni_GetStaticMethodID(PNPJNIENV pEnv, jclass clazz, const char *name, const char *sig)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticMethodID enter"));
    jmethodID rc = pEnv->pOrgEnv->functions->GetStaticMethodID(pEnv->pOrgEnv, clazz, name, sig);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticMethodID leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticObjectMethod wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *CallStaticObjectMethod)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, ...)
 */
jobject __stdcall npjni_CallStaticObjectMethod(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticObjectMethod enter"));
    jobject rc = pEnv->pOrgEnv->functions->CallStaticObjectMethodV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticObjectMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticObjectMethodV wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *CallStaticObjectMethodV)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args)
 */
jobject __stdcall npjni_CallStaticObjectMethodV(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticObjectMethodV enter"));
    jobject rc = pEnv->pOrgEnv->functions->CallStaticObjectMethodV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticObjectMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticObjectMethodA wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *CallStaticObjectMethodA)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args)
 */
jobject __stdcall npjni_CallStaticObjectMethodA(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticObjectMethodA enter"));
    jobject rc = pEnv->pOrgEnv->functions->CallStaticObjectMethodA(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticObjectMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticBooleanMethod wrapper.
 * 
 * Prototype:
 *     jboolean (JNICALL *CallStaticBooleanMethod)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, ...)
 */
jboolean __stdcall npjni_CallStaticBooleanMethod(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticBooleanMethod enter"));
    jboolean rc = pEnv->pOrgEnv->functions->CallStaticBooleanMethodV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticBooleanMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticBooleanMethodV wrapper.
 * 
 * Prototype:
 *     jboolean (JNICALL *CallStaticBooleanMethodV)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args)
 */
jboolean __stdcall npjni_CallStaticBooleanMethodV(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticBooleanMethodV enter"));
    jboolean rc = pEnv->pOrgEnv->functions->CallStaticBooleanMethodV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticBooleanMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticBooleanMethodA wrapper.
 * 
 * Prototype:
 *     jboolean (JNICALL *CallStaticBooleanMethodA)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args)
 */
jboolean __stdcall npjni_CallStaticBooleanMethodA(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticBooleanMethodA enter"));
    jboolean rc = pEnv->pOrgEnv->functions->CallStaticBooleanMethodA(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticBooleanMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticByteMethod wrapper.
 * 
 * Prototype:
 *     jbyte (JNICALL *CallStaticByteMethod)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, ...)
 */
jbyte __stdcall npjni_CallStaticByteMethod(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticByteMethod enter"));
    jbyte rc = pEnv->pOrgEnv->functions->CallStaticByteMethodV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticByteMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticByteMethodV wrapper.
 * 
 * Prototype:
 *     jbyte (JNICALL *CallStaticByteMethodV)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args)
 */
jbyte __stdcall npjni_CallStaticByteMethodV(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticByteMethodV enter"));
    jbyte rc = pEnv->pOrgEnv->functions->CallStaticByteMethodV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticByteMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticByteMethodA wrapper.
 * 
 * Prototype:
 *     jbyte (JNICALL *CallStaticByteMethodA)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args)
 */
jbyte __stdcall npjni_CallStaticByteMethodA(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticByteMethodA enter"));
    jbyte rc = pEnv->pOrgEnv->functions->CallStaticByteMethodA(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticByteMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticCharMethod wrapper.
 * 
 * Prototype:
 *     jchar (JNICALL *CallStaticCharMethod)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, ...)
 */
jchar __stdcall npjni_CallStaticCharMethod(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticCharMethod enter"));
    jchar rc = pEnv->pOrgEnv->functions->CallStaticCharMethodV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticCharMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticCharMethodV wrapper.
 * 
 * Prototype:
 *     jchar (JNICALL *CallStaticCharMethodV)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args)
 */
jchar __stdcall npjni_CallStaticCharMethodV(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticCharMethodV enter"));
    jchar rc = pEnv->pOrgEnv->functions->CallStaticCharMethodV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticCharMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticCharMethodA wrapper.
 * 
 * Prototype:
 *     jchar (JNICALL *CallStaticCharMethodA)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args)
 */
jchar __stdcall npjni_CallStaticCharMethodA(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticCharMethodA enter"));
    jchar rc = pEnv->pOrgEnv->functions->CallStaticCharMethodA(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticCharMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticShortMethod wrapper.
 * 
 * Prototype:
 *     jshort (JNICALL *CallStaticShortMethod)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, ...)
 */
jshort __stdcall npjni_CallStaticShortMethod(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticShortMethod enter"));
    jshort rc = pEnv->pOrgEnv->functions->CallStaticShortMethodV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticShortMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticShortMethodV wrapper.
 * 
 * Prototype:
 *     jshort (JNICALL *CallStaticShortMethodV)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args)
 */
jshort __stdcall npjni_CallStaticShortMethodV(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticShortMethodV enter"));
    jshort rc = pEnv->pOrgEnv->functions->CallStaticShortMethodV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticShortMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticShortMethodA wrapper.
 * 
 * Prototype:
 *     jshort (JNICALL *CallStaticShortMethodA)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args)
 */
jshort __stdcall npjni_CallStaticShortMethodA(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticShortMethodA enter"));
    jshort rc = pEnv->pOrgEnv->functions->CallStaticShortMethodA(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticShortMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticIntMethod wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *CallStaticIntMethod)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, ...)
 */
jint __stdcall npjni_CallStaticIntMethod(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticIntMethod enter"));
    jint rc = pEnv->pOrgEnv->functions->CallStaticIntMethodV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticIntMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticIntMethodV wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *CallStaticIntMethodV)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args)
 */
jint __stdcall npjni_CallStaticIntMethodV(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticIntMethodV enter"));
    jint rc = pEnv->pOrgEnv->functions->CallStaticIntMethodV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticIntMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticIntMethodA wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *CallStaticIntMethodA)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args)
 */
jint __stdcall npjni_CallStaticIntMethodA(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticIntMethodA enter"));
    jint rc = pEnv->pOrgEnv->functions->CallStaticIntMethodA(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticIntMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticLongMethod wrapper.
 * 
 * Prototype:
 *     jlong (JNICALL *CallStaticLongMethod)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, ...)
 */
long long __stdcall npjni_CallStaticLongMethod(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticLongMethod enter"));
    jlong llRc = pEnv->pOrgEnv->functions->CallStaticLongMethodV(pEnv->pOrgEnv, clazz, methodID, args);
#if NO_LONG_LONG
    dprintf(("npJNIEnvWrapper: npjni_CallStaticLongMethod leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJNIEnvWrapper: npjni_CallStaticLongMethod leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * CallStaticLongMethodV wrapper.
 * 
 * Prototype:
 *     jlong (JNICALL *CallStaticLongMethodV)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args)
 */
long long __stdcall npjni_CallStaticLongMethodV(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticLongMethodV enter"));
    jlong llRc = pEnv->pOrgEnv->functions->CallStaticLongMethodV(pEnv->pOrgEnv, clazz, methodID, args);
#if NO_LONG_LONG
    dprintf(("npJNIEnvWrapper: npjni_CallStaticLongMethodV leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJNIEnvWrapper: npjni_CallStaticLongMethodV leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * CallStaticLongMethodA wrapper.
 * 
 * Prototype:
 *     jlong (JNICALL *CallStaticLongMethodA)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args)
 */
long long __stdcall npjni_CallStaticLongMethodA(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticLongMethodA enter"));
    jlong llRc = pEnv->pOrgEnv->functions->CallStaticLongMethodA(pEnv->pOrgEnv, clazz, methodID, args);
#if NO_LONG_LONG
    dprintf(("npJNIEnvWrapper: npjni_CallStaticLongMethodA leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJNIEnvWrapper: npjni_CallStaticLongMethodA leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * CallStaticFloatMethod wrapper.
 * 
 * Prototype:
 *     jfloat (JNICALL *CallStaticFloatMethod)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, ...)
 */
jfloat __stdcall npjni_CallStaticFloatMethod(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticFloatMethod enter"));
    jfloat rc = pEnv->pOrgEnv->functions->CallStaticFloatMethodV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticFloatMethod leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticFloatMethodV wrapper.
 * 
 * Prototype:
 *     jfloat (JNICALL *CallStaticFloatMethodV)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args)
 */
jfloat __stdcall npjni_CallStaticFloatMethodV(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticFloatMethodV enter"));
    jfloat rc = pEnv->pOrgEnv->functions->CallStaticFloatMethodV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticFloatMethodV leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticFloatMethodA wrapper.
 * 
 * Prototype:
 *     jfloat (JNICALL *CallStaticFloatMethodA)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args)
 */
jfloat __stdcall npjni_CallStaticFloatMethodA(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticFloatMethodA enter"));
    jfloat rc = pEnv->pOrgEnv->functions->CallStaticFloatMethodA(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticFloatMethodA leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * CallStaticDoubleMethod wrapper.
 * 
 * Prototype:
 *     jdouble (JNICALL *CallStaticDoubleMethod)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, ...)
 */
jdouble __stdcall npjni_CallStaticDoubleMethod(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticDoubleMethod enter"));
    jdouble rdRc = pEnv->pOrgEnv->functions->CallStaticDoubleMethodV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticDoubleMethod leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * CallStaticDoubleMethodV wrapper.
 * 
 * Prototype:
 *     jdouble (JNICALL *CallStaticDoubleMethodV)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, va_list args)
 */
jdouble __stdcall npjni_CallStaticDoubleMethodV(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticDoubleMethodV enter"));
    jdouble rdRc = pEnv->pOrgEnv->functions->CallStaticDoubleMethodV(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticDoubleMethodV leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * CallStaticDoubleMethodA wrapper.
 * 
 * Prototype:
 *     jdouble (JNICALL *CallStaticDoubleMethodA)
 *         (JNIEnv *env, jclass clazz, jmethodID methodID, jvalue *args)
 */
jdouble __stdcall npjni_CallStaticDoubleMethodA(PNPJNIENV pEnv, jclass clazz, jmethodID methodID, jvalue *args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticDoubleMethodA enter"));
    jdouble rdRc = pEnv->pOrgEnv->functions->CallStaticDoubleMethodA(pEnv->pOrgEnv, clazz, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticDoubleMethodA leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * CallStaticVoidMethod wrapper.
 * 
 * Prototype:
 *     void (JNICALL *CallStaticVoidMethod)
 *         (JNIEnv *env, jclass cls, jmethodID methodID, ...)
 */
void __stdcall npjni_CallStaticVoidMethod(PNPJNIENV pEnv, jclass cls, jmethodID methodID, ...)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    va_list args;
    va_start(args, methodID);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticVoidMethod enter"));
    pEnv->pOrgEnv->functions->CallStaticVoidMethodV(pEnv->pOrgEnv, cls, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticVoidMethod leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * CallStaticVoidMethodV wrapper.
 * 
 * Prototype:
 *     void (JNICALL *CallStaticVoidMethodV)
 *         (JNIEnv *env, jclass cls, jmethodID methodID, va_list args)
 */
void __stdcall npjni_CallStaticVoidMethodV(PNPJNIENV pEnv, jclass cls, jmethodID methodID, va_list args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticVoidMethodV enter"));
    pEnv->pOrgEnv->functions->CallStaticVoidMethodV(pEnv->pOrgEnv, cls, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticVoidMethodV leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * CallStaticVoidMethodA wrapper.
 * 
 * Prototype:
 *     void (JNICALL *CallStaticVoidMethodA)
 *         (JNIEnv *env, jclass cls, jmethodID methodID, jvalue * args)
 */
void __stdcall npjni_CallStaticVoidMethodA(PNPJNIENV pEnv, jclass cls, jmethodID methodID, jvalue * args)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticVoidMethodA enter"));
    pEnv->pOrgEnv->functions->CallStaticVoidMethodA(pEnv->pOrgEnv, cls, methodID, args);
    dprintf(("npJNIEnvWrapper: npjni_CallStaticVoidMethodA leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * GetStaticFieldID wrapper.
 * 
 * Prototype:
 *     jfieldID (JNICALL *GetStaticFieldID)
 *         (JNIEnv *env, jclass clazz, const char *name, const char *sig)
 */
jfieldID __stdcall npjni_GetStaticFieldID(PNPJNIENV pEnv, jclass clazz, const char *name, const char *sig)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticFieldID enter"));
    jfieldID rc = pEnv->pOrgEnv->functions->GetStaticFieldID(pEnv->pOrgEnv, clazz, name, sig);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticFieldID leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticObjectField wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *GetStaticObjectField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID)
 */
jobject __stdcall npjni_GetStaticObjectField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticObjectField enter"));
    jobject rc = pEnv->pOrgEnv->functions->GetStaticObjectField(pEnv->pOrgEnv, clazz, fieldID);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticObjectField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticBooleanField wrapper.
 * 
 * Prototype:
 *     jboolean (JNICALL *GetStaticBooleanField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID)
 */
jboolean __stdcall npjni_GetStaticBooleanField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticBooleanField enter"));
    jboolean rc = pEnv->pOrgEnv->functions->GetStaticBooleanField(pEnv->pOrgEnv, clazz, fieldID);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticBooleanField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticByteField wrapper.
 * 
 * Prototype:
 *     jbyte (JNICALL *GetStaticByteField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID)
 */
jbyte __stdcall npjni_GetStaticByteField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticByteField enter"));
    jbyte rc = pEnv->pOrgEnv->functions->GetStaticByteField(pEnv->pOrgEnv, clazz, fieldID);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticByteField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticCharField wrapper.
 * 
 * Prototype:
 *     jchar (JNICALL *GetStaticCharField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID)
 */
jchar __stdcall npjni_GetStaticCharField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticCharField enter"));
    jchar rc = pEnv->pOrgEnv->functions->GetStaticCharField(pEnv->pOrgEnv, clazz, fieldID);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticCharField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticShortField wrapper.
 * 
 * Prototype:
 *     jshort (JNICALL *GetStaticShortField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID)
 */
jshort __stdcall npjni_GetStaticShortField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticShortField enter"));
    jshort rc = pEnv->pOrgEnv->functions->GetStaticShortField(pEnv->pOrgEnv, clazz, fieldID);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticShortField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticIntField wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *GetStaticIntField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID)
 */
jint __stdcall npjni_GetStaticIntField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticIntField enter"));
    jint rc = pEnv->pOrgEnv->functions->GetStaticIntField(pEnv->pOrgEnv, clazz, fieldID);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticIntField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticLongField wrapper.
 * 
 * Prototype:
 *     jlong (JNICALL *GetStaticLongField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID)
 */
long long __stdcall npjni_GetStaticLongField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticLongField enter"));
    jlong llRc = pEnv->pOrgEnv->functions->GetStaticLongField(pEnv->pOrgEnv, clazz, fieldID);
#if NO_LONG_LONG
    dprintf(("npJNIEnvWrapper: npjni_GetStaticLongField leave rc=%x%08x", llRc.hi, llRc.lo));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return ((long long)llRc.hi << 32) + (long long)llRc.lo;
#else
    dprintf(("npJNIEnvWrapper: npjni_GetStaticLongField leave rc=%x%08x", (unsigned)(llRc >> 32), (unsigned)llRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return llRc;
#endif
}



/**
 * GetStaticFloatField wrapper.
 * 
 * Prototype:
 *     jfloat (JNICALL *GetStaticFloatField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID)
 */
jfloat __stdcall npjni_GetStaticFloatField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticFloatField enter"));
    jfloat rc = pEnv->pOrgEnv->functions->GetStaticFloatField(pEnv->pOrgEnv, clazz, fieldID);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticFloatField leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStaticDoubleField wrapper.
 * 
 * Prototype:
 *     jdouble (JNICALL *GetStaticDoubleField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID)
 */
jdouble __stdcall npjni_GetStaticDoubleField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticDoubleField enter"));
    jdouble rdRc = pEnv->pOrgEnv->functions->GetStaticDoubleField(pEnv->pOrgEnv, clazz, fieldID);
    dprintf(("npJNIEnvWrapper: npjni_GetStaticDoubleField leave rc=%f", rdRc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rdRc;
}



/**
 * SetStaticObjectField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetStaticObjectField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID, jobject value)
 */
void __stdcall npjni_SetStaticObjectField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID, jobject value)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticObjectField enter"));
    pEnv->pOrgEnv->functions->SetStaticObjectField(pEnv->pOrgEnv, clazz, fieldID, value);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticObjectField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetStaticBooleanField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetStaticBooleanField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID, jboolean value)
 */
void __stdcall npjni_SetStaticBooleanField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID, jboolean value)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticBooleanField enter"));
    pEnv->pOrgEnv->functions->SetStaticBooleanField(pEnv->pOrgEnv, clazz, fieldID, value);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticBooleanField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetStaticByteField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetStaticByteField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID, jbyte value)
 */
void __stdcall npjni_SetStaticByteField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID, jbyte value)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticByteField enter"));
    pEnv->pOrgEnv->functions->SetStaticByteField(pEnv->pOrgEnv, clazz, fieldID, value);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticByteField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetStaticCharField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetStaticCharField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID, jchar value)
 */
void __stdcall npjni_SetStaticCharField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID, jchar value)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticCharField enter"));
    pEnv->pOrgEnv->functions->SetStaticCharField(pEnv->pOrgEnv, clazz, fieldID, value);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticCharField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetStaticShortField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetStaticShortField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID, jshort value)
 */
void __stdcall npjni_SetStaticShortField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID, jshort value)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticShortField enter"));
    pEnv->pOrgEnv->functions->SetStaticShortField(pEnv->pOrgEnv, clazz, fieldID, value);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticShortField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetStaticIntField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetStaticIntField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID, jint value)
 */
void __stdcall npjni_SetStaticIntField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID, jint value)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticIntField enter"));
    pEnv->pOrgEnv->functions->SetStaticIntField(pEnv->pOrgEnv, clazz, fieldID, value);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticIntField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetStaticLongField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetStaticLongField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID, jlong value)
 */
void __stdcall npjni_SetStaticLongField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID, jlong value)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticLongField enter"));
    pEnv->pOrgEnv->functions->SetStaticLongField(pEnv->pOrgEnv, clazz, fieldID, value);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticLongField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetStaticFloatField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetStaticFloatField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID, jfloat value)
 */
void __stdcall npjni_SetStaticFloatField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID, jfloat value)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticFloatField enter"));
    pEnv->pOrgEnv->functions->SetStaticFloatField(pEnv->pOrgEnv, clazz, fieldID, value);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticFloatField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetStaticDoubleField wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetStaticDoubleField)
 *         (JNIEnv *env, jclass clazz, jfieldID fieldID, jdouble value)
 */
void __stdcall npjni_SetStaticDoubleField(PNPJNIENV pEnv, jclass clazz, jfieldID fieldID, jdouble value)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticDoubleField enter"));
    pEnv->pOrgEnv->functions->SetStaticDoubleField(pEnv->pOrgEnv, clazz, fieldID, value);
    dprintf(("npJNIEnvWrapper: npjni_SetStaticDoubleField leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * NewString wrapper.
 * 
 * Prototype:
 *     jstring (JNICALL *NewString)
 *         (JNIEnv *env, const jchar *unicode, jsize len)
 */
jstring __stdcall npjni_NewString(PNPJNIENV pEnv, const jchar *unicode, jsize len)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_NewString enter"));
    jstring rc = pEnv->pOrgEnv->functions->NewString(pEnv->pOrgEnv, unicode, len);
    dprintf(("npJNIEnvWrapper: npjni_NewString leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStringLength wrapper.
 * 
 * Prototype:
 *     jsize (JNICALL *GetStringLength)
 *         (JNIEnv *env, jstring str)
 */
jsize __stdcall npjni_GetStringLength(PNPJNIENV pEnv, jstring str)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetStringLength enter"));
    jsize rc = pEnv->pOrgEnv->functions->GetStringLength(pEnv->pOrgEnv, str);
    dprintf(("npJNIEnvWrapper: npjni_GetStringLength leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStringChars wrapper.
 * 
 * Prototype:
 *     const jchar *(JNICALL *GetStringChars)
 *         (JNIEnv *env, jstring str, jboolean *isCopy)
 */
const jchar * __stdcall npjni_GetStringChars(PNPJNIENV pEnv, jstring str, jboolean *isCopy)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetStringChars enter"));
    const jchar * rc = pEnv->pOrgEnv->functions->GetStringChars(pEnv->pOrgEnv, str, isCopy);
    dprintf(("npJNIEnvWrapper: npjni_GetStringChars leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * ReleaseStringChars wrapper.
 * 
 * Prototype:
 *     void (JNICALL *ReleaseStringChars)
 *         (JNIEnv *env, jstring str, const jchar *chars)
 */
void __stdcall npjni_ReleaseStringChars(PNPJNIENV pEnv, jstring str, const jchar *chars)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseStringChars enter"));
    pEnv->pOrgEnv->functions->ReleaseStringChars(pEnv->pOrgEnv, str, chars);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseStringChars leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * NewStringUTF wrapper.
 * 
 * Prototype:
 *     jstring (JNICALL *NewStringUTF)
 *         (JNIEnv *env, const char *utf)
 */
jstring __stdcall npjni_NewStringUTF(PNPJNIENV pEnv, const char *utf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_NewStringUTF enter"));
    jstring rc = pEnv->pOrgEnv->functions->NewStringUTF(pEnv->pOrgEnv, utf);
    dprintf(("npJNIEnvWrapper: npjni_NewStringUTF leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStringUTFLength wrapper.
 * 
 * Prototype:
 *     jsize (JNICALL *GetStringUTFLength)
 *         (JNIEnv *env, jstring str)
 */
jsize __stdcall npjni_GetStringUTFLength(PNPJNIENV pEnv, jstring str)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetStringUTFLength enter"));
    jsize rc = pEnv->pOrgEnv->functions->GetStringUTFLength(pEnv->pOrgEnv, str);
    dprintf(("npJNIEnvWrapper: npjni_GetStringUTFLength leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetStringUTFChars wrapper.
 * 
 * Prototype:
 *     const char* (JNICALL *GetStringUTFChars)
 *         (JNIEnv *env, jstring str, jboolean *isCopy)
 */
const char* __stdcall npjni_GetStringUTFChars(PNPJNIENV pEnv, jstring str, jboolean *isCopy)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetStringUTFChars enter"));
    const char* rc = pEnv->pOrgEnv->functions->GetStringUTFChars(pEnv->pOrgEnv, str, isCopy);
    dprintf(("npJNIEnvWrapper: npjni_GetStringUTFChars leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * ReleaseStringUTFChars wrapper.
 * 
 * Prototype:
 *     void (JNICALL *ReleaseStringUTFChars)
 *         (JNIEnv *env, jstring str, const char* chars)
 */
void __stdcall npjni_ReleaseStringUTFChars(PNPJNIENV pEnv, jstring str, const char* chars)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseStringUTFChars enter"));
    pEnv->pOrgEnv->functions->ReleaseStringUTFChars(pEnv->pOrgEnv, str, chars);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseStringUTFChars leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * GetArrayLength wrapper.
 * 
 * Prototype:
 *     jsize (JNICALL *GetArrayLength)
 *         (JNIEnv *env, jarray array)
 */
jsize __stdcall npjni_GetArrayLength(PNPJNIENV pEnv, jarray array)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetArrayLength enter"));
    jsize rc = pEnv->pOrgEnv->functions->GetArrayLength(pEnv->pOrgEnv, array);
    dprintf(("npJNIEnvWrapper: npjni_GetArrayLength leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewObjectArray wrapper.
 * 
 * Prototype:
 *     jobjectArray (JNICALL *NewObjectArray)
 *         (JNIEnv *env, jsize len, jclass clazz, jobject init)
 */
jobjectArray __stdcall npjni_NewObjectArray(PNPJNIENV pEnv, jsize len, jclass clazz, jobject init)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_NewObjectArray enter"));
    jobjectArray rc = pEnv->pOrgEnv->functions->NewObjectArray(pEnv->pOrgEnv, len, clazz, init);
    dprintf(("npJNIEnvWrapper: npjni_NewObjectArray leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetObjectArrayElement wrapper.
 * 
 * Prototype:
 *     jobject (JNICALL *GetObjectArrayElement)
 *         (JNIEnv *env, jobjectArray array, jsize index)
 */
jobject __stdcall npjni_GetObjectArrayElement(PNPJNIENV pEnv, jobjectArray array, jsize index)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetObjectArrayElement enter"));
    jobject rc = pEnv->pOrgEnv->functions->GetObjectArrayElement(pEnv->pOrgEnv, array, index);
    dprintf(("npJNIEnvWrapper: npjni_GetObjectArrayElement leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * SetObjectArrayElement wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetObjectArrayElement)
 *         (JNIEnv *env, jobjectArray array, jsize index, jobject val)
 */
void __stdcall npjni_SetObjectArrayElement(PNPJNIENV pEnv, jobjectArray array, jsize index, jobject val)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetObjectArrayElement enter"));
    pEnv->pOrgEnv->functions->SetObjectArrayElement(pEnv->pOrgEnv, array, index, val);
    dprintf(("npJNIEnvWrapper: npjni_SetObjectArrayElement leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * NewBooleanArray wrapper.
 * 
 * Prototype:
 *     jbooleanArray (JNICALL *NewBooleanArray)
 *         (JNIEnv *env, jsize len)
 */
jbooleanArray __stdcall npjni_NewBooleanArray(PNPJNIENV pEnv, jsize len)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_NewBooleanArray enter"));
    jbooleanArray rc = pEnv->pOrgEnv->functions->NewBooleanArray(pEnv->pOrgEnv, len);
    dprintf(("npJNIEnvWrapper: npjni_NewBooleanArray leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewByteArray wrapper.
 * 
 * Prototype:
 *     jbyteArray (JNICALL *NewByteArray)
 *         (JNIEnv *env, jsize len)
 */
jbyteArray __stdcall npjni_NewByteArray(PNPJNIENV pEnv, jsize len)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_NewByteArray enter"));
    jbyteArray rc = pEnv->pOrgEnv->functions->NewByteArray(pEnv->pOrgEnv, len);
    dprintf(("npJNIEnvWrapper: npjni_NewByteArray leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewCharArray wrapper.
 * 
 * Prototype:
 *     jcharArray (JNICALL *NewCharArray)
 *         (JNIEnv *env, jsize len)
 */
jcharArray __stdcall npjni_NewCharArray(PNPJNIENV pEnv, jsize len)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_NewCharArray enter"));
    jcharArray rc = pEnv->pOrgEnv->functions->NewCharArray(pEnv->pOrgEnv, len);
    dprintf(("npJNIEnvWrapper: npjni_NewCharArray leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewShortArray wrapper.
 * 
 * Prototype:
 *     jshortArray (JNICALL *NewShortArray)
 *         (JNIEnv *env, jsize len)
 */
jshortArray __stdcall npjni_NewShortArray(PNPJNIENV pEnv, jsize len)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_NewShortArray enter"));
    jshortArray rc = pEnv->pOrgEnv->functions->NewShortArray(pEnv->pOrgEnv, len);
    dprintf(("npJNIEnvWrapper: npjni_NewShortArray leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewIntArray wrapper.
 * 
 * Prototype:
 *     jintArray (JNICALL *NewIntArray)
 *         (JNIEnv *env, jsize len)
 */
jintArray __stdcall npjni_NewIntArray(PNPJNIENV pEnv, jsize len)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_NewIntArray enter"));
    jintArray rc = pEnv->pOrgEnv->functions->NewIntArray(pEnv->pOrgEnv, len);
    dprintf(("npJNIEnvWrapper: npjni_NewIntArray leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewLongArray wrapper.
 * 
 * Prototype:
 *     jlongArray (JNICALL *NewLongArray)
 *         (JNIEnv *env, jsize len)
 */
jlongArray __stdcall npjni_NewLongArray(PNPJNIENV pEnv, jsize len)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_NewLongArray enter"));
    jlongArray rc = pEnv->pOrgEnv->functions->NewLongArray(pEnv->pOrgEnv, len);
    dprintf(("npJNIEnvWrapper: npjni_NewLongArray leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewFloatArray wrapper.
 * 
 * Prototype:
 *     jfloatArray (JNICALL *NewFloatArray)
 *         (JNIEnv *env, jsize len)
 */
jfloatArray __stdcall npjni_NewFloatArray(PNPJNIENV pEnv, jsize len)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_NewFloatArray enter"));
    jfloatArray rc = pEnv->pOrgEnv->functions->NewFloatArray(pEnv->pOrgEnv, len);
    dprintf(("npJNIEnvWrapper: npjni_NewFloatArray leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * NewDoubleArray wrapper.
 * 
 * Prototype:
 *     jdoubleArray (JNICALL *NewDoubleArray)
 *         (JNIEnv *env, jsize len)
 */
jdoubleArray __stdcall npjni_NewDoubleArray(PNPJNIENV pEnv, jsize len)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_NewDoubleArray enter"));
    jdoubleArray rc = pEnv->pOrgEnv->functions->NewDoubleArray(pEnv->pOrgEnv, len);
    dprintf(("npJNIEnvWrapper: npjni_NewDoubleArray leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetBooleanArrayElements wrapper.
 * 
 * Prototype:
 *     jboolean * (JNICALL *GetBooleanArrayElements)
 *         (JNIEnv *env, jbooleanArray array, jboolean *isCopy)
 */
jboolean * __stdcall npjni_GetBooleanArrayElements(PNPJNIENV pEnv, jbooleanArray array, jboolean *isCopy)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetBooleanArrayElements enter"));
    jboolean * rc = pEnv->pOrgEnv->functions->GetBooleanArrayElements(pEnv->pOrgEnv, array, isCopy);
    dprintf(("npJNIEnvWrapper: npjni_GetBooleanArrayElements leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetByteArrayElements wrapper.
 * 
 * Prototype:
 *     jbyte * (JNICALL *GetByteArrayElements)
 *         (JNIEnv *env, jbyteArray array, jboolean *isCopy)
 */
jbyte * __stdcall npjni_GetByteArrayElements(PNPJNIENV pEnv, jbyteArray array, jboolean *isCopy)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetByteArrayElements enter"));
    jbyte * rc = pEnv->pOrgEnv->functions->GetByteArrayElements(pEnv->pOrgEnv, array, isCopy);
    dprintf(("npJNIEnvWrapper: npjni_GetByteArrayElements leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetCharArrayElements wrapper.
 * 
 * Prototype:
 *     jchar * (JNICALL *GetCharArrayElements)
 *         (JNIEnv *env, jcharArray array, jboolean *isCopy)
 */
jchar * __stdcall npjni_GetCharArrayElements(PNPJNIENV pEnv, jcharArray array, jboolean *isCopy)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetCharArrayElements enter"));
    jchar * rc = pEnv->pOrgEnv->functions->GetCharArrayElements(pEnv->pOrgEnv, array, isCopy);
    dprintf(("npJNIEnvWrapper: npjni_GetCharArrayElements leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetShortArrayElements wrapper.
 * 
 * Prototype:
 *     jshort * (JNICALL *GetShortArrayElements)
 *         (JNIEnv *env, jshortArray array, jboolean *isCopy)
 */
jshort * __stdcall npjni_GetShortArrayElements(PNPJNIENV pEnv, jshortArray array, jboolean *isCopy)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetShortArrayElements enter"));
    jshort * rc = pEnv->pOrgEnv->functions->GetShortArrayElements(pEnv->pOrgEnv, array, isCopy);
    dprintf(("npJNIEnvWrapper: npjni_GetShortArrayElements leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetIntArrayElements wrapper.
 * 
 * Prototype:
 *     jint * (JNICALL *GetIntArrayElements)
 *         (JNIEnv *env, jintArray array, jboolean *isCopy)
 */
jint * __stdcall npjni_GetIntArrayElements(PNPJNIENV pEnv, jintArray array, jboolean *isCopy)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetIntArrayElements enter"));
    jint * rc = pEnv->pOrgEnv->functions->GetIntArrayElements(pEnv->pOrgEnv, array, isCopy);
    dprintf(("npJNIEnvWrapper: npjni_GetIntArrayElements leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetLongArrayElements wrapper.
 * 
 * Prototype:
 *     jlong * (JNICALL *GetLongArrayElements)
 *         (JNIEnv *env, jlongArray array, jboolean *isCopy)
 */
jlong * __stdcall npjni_GetLongArrayElements(PNPJNIENV pEnv, jlongArray array, jboolean *isCopy)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetLongArrayElements enter"));
    jlong * rc = pEnv->pOrgEnv->functions->GetLongArrayElements(pEnv->pOrgEnv, array, isCopy);
    dprintf(("npJNIEnvWrapper: npjni_GetLongArrayElements leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetFloatArrayElements wrapper.
 * 
 * Prototype:
 *     jfloat * (JNICALL *GetFloatArrayElements)
 *         (JNIEnv *env, jfloatArray array, jboolean *isCopy)
 */
jfloat * __stdcall npjni_GetFloatArrayElements(PNPJNIENV pEnv, jfloatArray array, jboolean *isCopy)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetFloatArrayElements enter"));
    jfloat * rc = pEnv->pOrgEnv->functions->GetFloatArrayElements(pEnv->pOrgEnv, array, isCopy);
    dprintf(("npJNIEnvWrapper: npjni_GetFloatArrayElements leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * GetDoubleArrayElements wrapper.
 * 
 * Prototype:
 *     jdouble * (JNICALL *GetDoubleArrayElements)
 *         (JNIEnv *env, jdoubleArray array, jboolean *isCopy)
 */
jdouble * __stdcall npjni_GetDoubleArrayElements(PNPJNIENV pEnv, jdoubleArray array, jboolean *isCopy)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetDoubleArrayElements enter"));
    jdouble * rc = pEnv->pOrgEnv->functions->GetDoubleArrayElements(pEnv->pOrgEnv, array, isCopy);
    dprintf(("npJNIEnvWrapper: npjni_GetDoubleArrayElements leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * ReleaseBooleanArrayElements wrapper.
 * 
 * Prototype:
 *     void (JNICALL *ReleaseBooleanArrayElements)
 *         (JNIEnv *env, jbooleanArray array, jboolean *elems, jint mode)
 */
void __stdcall npjni_ReleaseBooleanArrayElements(PNPJNIENV pEnv, jbooleanArray array, jboolean *elems, jint mode)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseBooleanArrayElements enter"));
    pEnv->pOrgEnv->functions->ReleaseBooleanArrayElements(pEnv->pOrgEnv, array, elems, mode);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseBooleanArrayElements leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * ReleaseByteArrayElements wrapper.
 * 
 * Prototype:
 *     void (JNICALL *ReleaseByteArrayElements)
 *         (JNIEnv *env, jbyteArray array, jbyte *elems, jint mode)
 */
void __stdcall npjni_ReleaseByteArrayElements(PNPJNIENV pEnv, jbyteArray array, jbyte *elems, jint mode)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseByteArrayElements enter"));
    pEnv->pOrgEnv->functions->ReleaseByteArrayElements(pEnv->pOrgEnv, array, elems, mode);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseByteArrayElements leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * ReleaseCharArrayElements wrapper.
 * 
 * Prototype:
 *     void (JNICALL *ReleaseCharArrayElements)
 *         (JNIEnv *env, jcharArray array, jchar *elems, jint mode)
 */
void __stdcall npjni_ReleaseCharArrayElements(PNPJNIENV pEnv, jcharArray array, jchar *elems, jint mode)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseCharArrayElements enter"));
    pEnv->pOrgEnv->functions->ReleaseCharArrayElements(pEnv->pOrgEnv, array, elems, mode);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseCharArrayElements leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * ReleaseShortArrayElements wrapper.
 * 
 * Prototype:
 *     void (JNICALL *ReleaseShortArrayElements)
 *         (JNIEnv *env, jshortArray array, jshort *elems, jint mode)
 */
void __stdcall npjni_ReleaseShortArrayElements(PNPJNIENV pEnv, jshortArray array, jshort *elems, jint mode)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseShortArrayElements enter"));
    pEnv->pOrgEnv->functions->ReleaseShortArrayElements(pEnv->pOrgEnv, array, elems, mode);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseShortArrayElements leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * ReleaseIntArrayElements wrapper.
 * 
 * Prototype:
 *     void (JNICALL *ReleaseIntArrayElements)
 *         (JNIEnv *env, jintArray array, jint *elems, jint mode)
 */
void __stdcall npjni_ReleaseIntArrayElements(PNPJNIENV pEnv, jintArray array, jint *elems, jint mode)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseIntArrayElements enter"));
    pEnv->pOrgEnv->functions->ReleaseIntArrayElements(pEnv->pOrgEnv, array, elems, mode);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseIntArrayElements leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * ReleaseLongArrayElements wrapper.
 * 
 * Prototype:
 *     void (JNICALL *ReleaseLongArrayElements)
 *         (JNIEnv *env, jlongArray array, jlong *elems, jint mode)
 */
void __stdcall npjni_ReleaseLongArrayElements(PNPJNIENV pEnv, jlongArray array, jlong *elems, jint mode)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseLongArrayElements enter"));
    pEnv->pOrgEnv->functions->ReleaseLongArrayElements(pEnv->pOrgEnv, array, elems, mode);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseLongArrayElements leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * ReleaseFloatArrayElements wrapper.
 * 
 * Prototype:
 *     void (JNICALL *ReleaseFloatArrayElements)
 *         (JNIEnv *env, jfloatArray array, jfloat *elems, jint mode)
 */
void __stdcall npjni_ReleaseFloatArrayElements(PNPJNIENV pEnv, jfloatArray array, jfloat *elems, jint mode)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseFloatArrayElements enter"));
    pEnv->pOrgEnv->functions->ReleaseFloatArrayElements(pEnv->pOrgEnv, array, elems, mode);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseFloatArrayElements leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * ReleaseDoubleArrayElements wrapper.
 * 
 * Prototype:
 *     void (JNICALL *ReleaseDoubleArrayElements)
 *         (JNIEnv *env, jdoubleArray array, jdouble *elems, jint mode)
 */
void __stdcall npjni_ReleaseDoubleArrayElements(PNPJNIENV pEnv, jdoubleArray array, jdouble *elems, jint mode)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseDoubleArrayElements enter"));
    pEnv->pOrgEnv->functions->ReleaseDoubleArrayElements(pEnv->pOrgEnv, array, elems, mode);
    dprintf(("npJNIEnvWrapper: npjni_ReleaseDoubleArrayElements leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * GetBooleanArrayRegion wrapper.
 * 
 * Prototype:
 *     void (JNICALL *GetBooleanArrayRegion)
 *         (JNIEnv *env, jbooleanArray array, jsize start, jsize l, jboolean *buf)
 */
void __stdcall npjni_GetBooleanArrayRegion(PNPJNIENV pEnv, jbooleanArray array, jsize start, jsize l, jboolean *buf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetBooleanArrayRegion enter"));
    pEnv->pOrgEnv->functions->GetBooleanArrayRegion(pEnv->pOrgEnv, array, start, l, buf);
    dprintf(("npJNIEnvWrapper: npjni_GetBooleanArrayRegion leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * GetByteArrayRegion wrapper.
 * 
 * Prototype:
 *     void (JNICALL *GetByteArrayRegion)
 *         (JNIEnv *env, jbyteArray array, jsize start, jsize len, jbyte *buf)
 */
void __stdcall npjni_GetByteArrayRegion(PNPJNIENV pEnv, jbyteArray array, jsize start, jsize len, jbyte *buf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetByteArrayRegion enter"));
    pEnv->pOrgEnv->functions->GetByteArrayRegion(pEnv->pOrgEnv, array, start, len, buf);
    dprintf(("npJNIEnvWrapper: npjni_GetByteArrayRegion leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * GetCharArrayRegion wrapper.
 * 
 * Prototype:
 *     void (JNICALL *GetCharArrayRegion)
 *         (JNIEnv *env, jcharArray array, jsize start, jsize len, jchar *buf)
 */
void __stdcall npjni_GetCharArrayRegion(PNPJNIENV pEnv, jcharArray array, jsize start, jsize len, jchar *buf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetCharArrayRegion enter"));
    pEnv->pOrgEnv->functions->GetCharArrayRegion(pEnv->pOrgEnv, array, start, len, buf);
    dprintf(("npJNIEnvWrapper: npjni_GetCharArrayRegion leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * GetShortArrayRegion wrapper.
 * 
 * Prototype:
 *     void (JNICALL *GetShortArrayRegion)
 *         (JNIEnv *env, jshortArray array, jsize start, jsize len, jshort *buf)
 */
void __stdcall npjni_GetShortArrayRegion(PNPJNIENV pEnv, jshortArray array, jsize start, jsize len, jshort *buf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetShortArrayRegion enter"));
    pEnv->pOrgEnv->functions->GetShortArrayRegion(pEnv->pOrgEnv, array, start, len, buf);
    dprintf(("npJNIEnvWrapper: npjni_GetShortArrayRegion leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * GetIntArrayRegion wrapper.
 * 
 * Prototype:
 *     void (JNICALL *GetIntArrayRegion)
 *         (JNIEnv *env, jintArray array, jsize start, jsize len, jint *buf)
 */
void __stdcall npjni_GetIntArrayRegion(PNPJNIENV pEnv, jintArray array, jsize start, jsize len, jint *buf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetIntArrayRegion enter"));
    pEnv->pOrgEnv->functions->GetIntArrayRegion(pEnv->pOrgEnv, array, start, len, buf);
    dprintf(("npJNIEnvWrapper: npjni_GetIntArrayRegion leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * GetLongArrayRegion wrapper.
 * 
 * Prototype:
 *     void (JNICALL *GetLongArrayRegion)
 *         (JNIEnv *env, jlongArray array, jsize start, jsize len, jlong *buf)
 */
void __stdcall npjni_GetLongArrayRegion(PNPJNIENV pEnv, jlongArray array, jsize start, jsize len, jlong *buf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetLongArrayRegion enter"));
    pEnv->pOrgEnv->functions->GetLongArrayRegion(pEnv->pOrgEnv, array, start, len, buf);
    dprintf(("npJNIEnvWrapper: npjni_GetLongArrayRegion leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * GetFloatArrayRegion wrapper.
 * 
 * Prototype:
 *     void (JNICALL *GetFloatArrayRegion)
 *         (JNIEnv *env, jfloatArray array, jsize start, jsize len, jfloat *buf)
 */
void __stdcall npjni_GetFloatArrayRegion(PNPJNIENV pEnv, jfloatArray array, jsize start, jsize len, jfloat *buf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetFloatArrayRegion enter"));
    pEnv->pOrgEnv->functions->GetFloatArrayRegion(pEnv->pOrgEnv, array, start, len, buf);
    dprintf(("npJNIEnvWrapper: npjni_GetFloatArrayRegion leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * GetDoubleArrayRegion wrapper.
 * 
 * Prototype:
 *     void (JNICALL *GetDoubleArrayRegion)
 *         (JNIEnv *env, jdoubleArray array, jsize start, jsize len, jdouble *buf)
 */
void __stdcall npjni_GetDoubleArrayRegion(PNPJNIENV pEnv, jdoubleArray array, jsize start, jsize len, jdouble *buf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetDoubleArrayRegion enter"));
    pEnv->pOrgEnv->functions->GetDoubleArrayRegion(pEnv->pOrgEnv, array, start, len, buf);
    dprintf(("npJNIEnvWrapper: npjni_GetDoubleArrayRegion leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetBooleanArrayRegion wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetBooleanArrayRegion)
 *         (JNIEnv *env, jbooleanArray array, jsize start, jsize l, jboolean *buf)
 */
void __stdcall npjni_SetBooleanArrayRegion(PNPJNIENV pEnv, jbooleanArray array, jsize start, jsize l, jboolean *buf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetBooleanArrayRegion enter"));
    pEnv->pOrgEnv->functions->SetBooleanArrayRegion(pEnv->pOrgEnv, array, start, l, buf);
    dprintf(("npJNIEnvWrapper: npjni_SetBooleanArrayRegion leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetByteArrayRegion wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetByteArrayRegion)
 *         (JNIEnv *env, jbyteArray array, jsize start, jsize len, jbyte *buf)
 */
void __stdcall npjni_SetByteArrayRegion(PNPJNIENV pEnv, jbyteArray array, jsize start, jsize len, jbyte *buf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetByteArrayRegion enter"));
    pEnv->pOrgEnv->functions->SetByteArrayRegion(pEnv->pOrgEnv, array, start, len, buf);
    dprintf(("npJNIEnvWrapper: npjni_SetByteArrayRegion leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetCharArrayRegion wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetCharArrayRegion)
 *         (JNIEnv *env, jcharArray array, jsize start, jsize len, jchar *buf)
 */
void __stdcall npjni_SetCharArrayRegion(PNPJNIENV pEnv, jcharArray array, jsize start, jsize len, jchar *buf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetCharArrayRegion enter"));
    pEnv->pOrgEnv->functions->SetCharArrayRegion(pEnv->pOrgEnv, array, start, len, buf);
    dprintf(("npJNIEnvWrapper: npjni_SetCharArrayRegion leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetShortArrayRegion wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetShortArrayRegion)
 *         (JNIEnv *env, jshortArray array, jsize start, jsize len, jshort *buf)
 */
void __stdcall npjni_SetShortArrayRegion(PNPJNIENV pEnv, jshortArray array, jsize start, jsize len, jshort *buf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetShortArrayRegion enter"));
    pEnv->pOrgEnv->functions->SetShortArrayRegion(pEnv->pOrgEnv, array, start, len, buf);
    dprintf(("npJNIEnvWrapper: npjni_SetShortArrayRegion leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetIntArrayRegion wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetIntArrayRegion)
 *         (JNIEnv *env, jintArray array, jsize start, jsize len, jint *buf)
 */
void __stdcall npjni_SetIntArrayRegion(PNPJNIENV pEnv, jintArray array, jsize start, jsize len, jint *buf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetIntArrayRegion enter"));
    pEnv->pOrgEnv->functions->SetIntArrayRegion(pEnv->pOrgEnv, array, start, len, buf);
    dprintf(("npJNIEnvWrapper: npjni_SetIntArrayRegion leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetLongArrayRegion wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetLongArrayRegion)
 *         (JNIEnv *env, jlongArray array, jsize start, jsize len, jlong *buf)
 */
void __stdcall npjni_SetLongArrayRegion(PNPJNIENV pEnv, jlongArray array, jsize start, jsize len, jlong *buf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetLongArrayRegion enter"));
    pEnv->pOrgEnv->functions->SetLongArrayRegion(pEnv->pOrgEnv, array, start, len, buf);
    dprintf(("npJNIEnvWrapper: npjni_SetLongArrayRegion leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetFloatArrayRegion wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetFloatArrayRegion)
 *         (JNIEnv *env, jfloatArray array, jsize start, jsize len, jfloat *buf)
 */
void __stdcall npjni_SetFloatArrayRegion(PNPJNIENV pEnv, jfloatArray array, jsize start, jsize len, jfloat *buf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetFloatArrayRegion enter"));
    pEnv->pOrgEnv->functions->SetFloatArrayRegion(pEnv->pOrgEnv, array, start, len, buf);
    dprintf(("npJNIEnvWrapper: npjni_SetFloatArrayRegion leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



/**
 * SetDoubleArrayRegion wrapper.
 * 
 * Prototype:
 *     void (JNICALL *SetDoubleArrayRegion)
 *         (JNIEnv *env, jdoubleArray array, jsize start, jsize len, jdouble *buf)
 */
void __stdcall npjni_SetDoubleArrayRegion(PNPJNIENV pEnv, jdoubleArray array, jsize start, jsize len, jdouble *buf)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_SetDoubleArrayRegion enter"));
    pEnv->pOrgEnv->functions->SetDoubleArrayRegion(pEnv->pOrgEnv, array, start, len, buf);
    dprintf(("npJNIEnvWrapper: npjni_SetDoubleArrayRegion leave"));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
}



#ifdef NPDLLJNICALLBACK_ALL
/**
 * RegisterNatives wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *RegisterNatives)
 *         (JNIEnv *env, jclass clazz, const JNINativeMethod *methods, jint nMethods)
 */
jint __stdcall npjni_RegisterNatives(PNPJNIENV pEnv, jclass clazz, const JNINativeMethod *methods, jint nMethods)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_RegisterNatives enter"));
    jint rc = pEnv->pOrgEnv->functions->RegisterNatives(pEnv->pOrgEnv, clazz, methods, nMethods);
    dprintf(("npJNIEnvWrapper: npjni_RegisterNatives leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}
#endif



/**
 * UnregisterNatives wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *UnregisterNatives)
 *         (JNIEnv *env, jclass clazz)
 */
jint __stdcall npjni_UnregisterNatives(PNPJNIENV pEnv, jclass clazz)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_UnregisterNatives enter"));
    jint rc = pEnv->pOrgEnv->functions->UnregisterNatives(pEnv->pOrgEnv, clazz);
    dprintf(("npJNIEnvWrapper: npjni_UnregisterNatives leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * MonitorEnter wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *MonitorEnter)
 *         (JNIEnv *env, jobject obj)
 */
jint __stdcall npjni_MonitorEnter(PNPJNIENV pEnv, jobject obj)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_MonitorEnter enter"));
    jint rc = pEnv->pOrgEnv->functions->MonitorEnter(pEnv->pOrgEnv, obj);
    dprintf(("npJNIEnvWrapper: npjni_MonitorEnter leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



/**
 * MonitorExit wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *MonitorExit)
 *         (JNIEnv *env, jobject obj)
 */
jint __stdcall npjni_MonitorExit(PNPJNIENV pEnv, jobject obj)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_MonitorExit enter"));
    jint rc = pEnv->pOrgEnv->functions->MonitorExit(pEnv->pOrgEnv, obj);
    dprintf(("npJNIEnvWrapper: npjni_MonitorExit leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}



#ifdef NPDLLJNICALLBACK_ALL
/**
 * GetJavaVM wrapper.
 * 
 * Prototype:
 *     jint (JNICALL *GetJavaVM)
 *         (JNIEnv *env, JavaVM **vm)
 */
jint __stdcall npjni_GetJavaVM(PNPJNIENV pEnv, JavaVM **vm)
{
    USHORT selFSOld = pfnODIN_ThreadLeaveOdinContextNested(NULL, FALSE);
    dprintf(("npJNIEnvWrapper: npjni_GetJavaVM enter"));
    jint rc = pEnv->pOrgEnv->functions->GetJavaVM(pEnv->pOrgEnv, vm);
    dprintf(("npJNIEnvWrapper: npjni_GetJavaVM leave rc=%x", rc));
    pfnODIN_ThreadEnterOdinContextNested(NULL, FALSE, selFSOld);
    return rc;
}
#endif


/**
 * Conversion structure.
 */
unsigned apfnJNIEnv[] = 
{
    0, /* void *reserved0; */
    0, /* void *reserved1; */
    0, /* void *reserved2; */
    0, /* void *reserved3; */
    (unsigned)npjni_GetVersion,
    (unsigned)npjni_DefineClass,
    (unsigned)npjni_FindClass,
    (unsigned)npjni_FromReflectedMethod,
    (unsigned)npjni_FromReflectedField,
    (unsigned)npjni_ToReflectedMethod,
    (unsigned)npjni_GetSuperclass,
    (unsigned)npjni_IsAssignableFrom,
    (unsigned)npjni_ToReflectedField,
    (unsigned)npjni_Throw,
    (unsigned)npjni_ThrowNew,
    (unsigned)npjni_ExceptionOccurred,
    (unsigned)npjni_ExceptionDescribe,
    (unsigned)npjni_ExceptionClear,
    (unsigned)npjni_FatalError,
    (unsigned)npjni_PushLocalFrame,
    (unsigned)npjni_PopLocalFrame,
    (unsigned)npjni_NewGlobalRef,
    (unsigned)npjni_DeleteGlobalRef,
    (unsigned)npjni_DeleteLocalRef,
    (unsigned)npjni_IsSameObject,
    (unsigned)npjni_NewLocalRef,
    (unsigned)npjni_EnsureLocalCapacity,
    (unsigned)npjni_AllocObject,
    (unsigned)npjni_NewObject,
    (unsigned)npjni_NewObjectV,
    (unsigned)npjni_NewObjectA,
    (unsigned)npjni_GetObjectClass,
    (unsigned)npjni_IsInstanceOf,
    (unsigned)npjni_GetMethodID,
    (unsigned)npjni_CallObjectMethod,
    (unsigned)npjni_CallObjectMethodV,
    (unsigned)npjni_CallObjectMethodA,
    (unsigned)npjni_CallBooleanMethod,
    (unsigned)npjni_CallBooleanMethodV,
    (unsigned)npjni_CallBooleanMethodA,
    (unsigned)npjni_CallByteMethod,
    (unsigned)npjni_CallByteMethodV,
    (unsigned)npjni_CallByteMethodA,
    (unsigned)npjni_CallCharMethod,
    (unsigned)npjni_CallCharMethodV,
    (unsigned)npjni_CallCharMethodA,
    (unsigned)npjni_CallShortMethod,
    (unsigned)npjni_CallShortMethodV,
    (unsigned)npjni_CallShortMethodA,
    (unsigned)npjni_CallIntMethod,
    (unsigned)npjni_CallIntMethodV,
    (unsigned)npjni_CallIntMethodA,
    (unsigned)npjni_CallLongMethod,
    (unsigned)npjni_CallLongMethodV,
    (unsigned)npjni_CallLongMethodA,
    (unsigned)npjni_CallFloatMethod,
    (unsigned)npjni_CallFloatMethodV,
    (unsigned)npjni_CallFloatMethodA,
    (unsigned)npjni_CallDoubleMethod,
    (unsigned)npjni_CallDoubleMethodV,
    (unsigned)npjni_CallDoubleMethodA,
    (unsigned)npjni_CallVoidMethod,
    (unsigned)npjni_CallVoidMethodV,
    (unsigned)npjni_CallVoidMethodA,
    (unsigned)npjni_CallNonvirtualObjectMethod,
    (unsigned)npjni_CallNonvirtualObjectMethodV,
    (unsigned)npjni_CallNonvirtualObjectMethodA,
    (unsigned)npjni_CallNonvirtualBooleanMethod,
    (unsigned)npjni_CallNonvirtualBooleanMethodV,
    (unsigned)npjni_CallNonvirtualBooleanMethodA,
    (unsigned)npjni_CallNonvirtualByteMethod,
    (unsigned)npjni_CallNonvirtualByteMethodV,
    (unsigned)npjni_CallNonvirtualByteMethodA,
    (unsigned)npjni_CallNonvirtualCharMethod,
    (unsigned)npjni_CallNonvirtualCharMethodV,
    (unsigned)npjni_CallNonvirtualCharMethodA,
    (unsigned)npjni_CallNonvirtualShortMethod,
    (unsigned)npjni_CallNonvirtualShortMethodV,
    (unsigned)npjni_CallNonvirtualShortMethodA,
    (unsigned)npjni_CallNonvirtualIntMethod,
    (unsigned)npjni_CallNonvirtualIntMethodV,
    (unsigned)npjni_CallNonvirtualIntMethodA,
    (unsigned)npjni_CallNonvirtualLongMethod,
    (unsigned)npjni_CallNonvirtualLongMethodV,
    (unsigned)npjni_CallNonvirtualLongMethodA,
    (unsigned)npjni_CallNonvirtualFloatMethod,
    (unsigned)npjni_CallNonvirtualFloatMethodV,
    (unsigned)npjni_CallNonvirtualFloatMethodA,
    (unsigned)npjni_CallNonvirtualDoubleMethod,
    (unsigned)npjni_CallNonvirtualDoubleMethodV,
    (unsigned)npjni_CallNonvirtualDoubleMethodA,
    (unsigned)npjni_CallNonvirtualVoidMethod,
    (unsigned)npjni_CallNonvirtualVoidMethodV,
    (unsigned)npjni_CallNonvirtualVoidMethodA,
    (unsigned)npjni_GetFieldID,
    (unsigned)npjni_GetObjectField,
    (unsigned)npjni_GetBooleanField,
    (unsigned)npjni_GetByteField,
    (unsigned)npjni_GetCharField,
    (unsigned)npjni_GetShortField,
    (unsigned)npjni_GetIntField,
    (unsigned)npjni_GetLongField,
    (unsigned)npjni_GetFloatField,
    (unsigned)npjni_GetDoubleField,
    (unsigned)npjni_SetObjectField,
    (unsigned)npjni_SetBooleanField,
    (unsigned)npjni_SetByteField,
    (unsigned)npjni_SetCharField,
    (unsigned)npjni_SetShortField,
    (unsigned)npjni_SetIntField,
    (unsigned)npjni_SetLongField,
    (unsigned)npjni_SetFloatField,
    (unsigned)npjni_SetDoubleField,
    (unsigned)npjni_GetStaticMethodID,
    (unsigned)npjni_CallStaticObjectMethod,
    (unsigned)npjni_CallStaticObjectMethodV,
    (unsigned)npjni_CallStaticObjectMethodA,
    (unsigned)npjni_CallStaticBooleanMethod,
    (unsigned)npjni_CallStaticBooleanMethodV,
    (unsigned)npjni_CallStaticBooleanMethodA,
    (unsigned)npjni_CallStaticByteMethod,
    (unsigned)npjni_CallStaticByteMethodV,
    (unsigned)npjni_CallStaticByteMethodA,
    (unsigned)npjni_CallStaticCharMethod,
    (unsigned)npjni_CallStaticCharMethodV,
    (unsigned)npjni_CallStaticCharMethodA,
    (unsigned)npjni_CallStaticShortMethod,
    (unsigned)npjni_CallStaticShortMethodV,
    (unsigned)npjni_CallStaticShortMethodA,
    (unsigned)npjni_CallStaticIntMethod,
    (unsigned)npjni_CallStaticIntMethodV,
    (unsigned)npjni_CallStaticIntMethodA,
    (unsigned)npjni_CallStaticLongMethod,
    (unsigned)npjni_CallStaticLongMethodV,
    (unsigned)npjni_CallStaticLongMethodA,
    (unsigned)npjni_CallStaticFloatMethod,
    (unsigned)npjni_CallStaticFloatMethodV,
    (unsigned)npjni_CallStaticFloatMethodA,
    (unsigned)npjni_CallStaticDoubleMethod,
    (unsigned)npjni_CallStaticDoubleMethodV,
    (unsigned)npjni_CallStaticDoubleMethodA,
    (unsigned)npjni_CallStaticVoidMethod,
    (unsigned)npjni_CallStaticVoidMethodV,
    (unsigned)npjni_CallStaticVoidMethodA,
    (unsigned)npjni_GetStaticFieldID,
    (unsigned)npjni_GetStaticObjectField,
    (unsigned)npjni_GetStaticBooleanField,
    (unsigned)npjni_GetStaticByteField,
    (unsigned)npjni_GetStaticCharField,
    (unsigned)npjni_GetStaticShortField,
    (unsigned)npjni_GetStaticIntField,
    (unsigned)npjni_GetStaticLongField,
    (unsigned)npjni_GetStaticFloatField,
    (unsigned)npjni_GetStaticDoubleField,
    (unsigned)npjni_SetStaticObjectField,
    (unsigned)npjni_SetStaticBooleanField,
    (unsigned)npjni_SetStaticByteField,
    (unsigned)npjni_SetStaticCharField,
    (unsigned)npjni_SetStaticShortField,
    (unsigned)npjni_SetStaticIntField,
    (unsigned)npjni_SetStaticLongField,
    (unsigned)npjni_SetStaticFloatField,
    (unsigned)npjni_SetStaticDoubleField,
    (unsigned)npjni_NewString,
    (unsigned)npjni_GetStringLength,
    (unsigned)npjni_GetStringChars,
    (unsigned)npjni_ReleaseStringChars,
    (unsigned)npjni_NewStringUTF,
    (unsigned)npjni_GetStringUTFLength,
    (unsigned)npjni_GetStringUTFChars,
    (unsigned)npjni_ReleaseStringUTFChars,
    (unsigned)npjni_GetArrayLength,
    (unsigned)npjni_NewObjectArray,
    (unsigned)npjni_GetObjectArrayElement,
    (unsigned)npjni_SetObjectArrayElement,
    (unsigned)npjni_NewBooleanArray,
    (unsigned)npjni_NewByteArray,
    (unsigned)npjni_NewCharArray,
    (unsigned)npjni_NewShortArray,
    (unsigned)npjni_NewIntArray,
    (unsigned)npjni_NewLongArray,
    (unsigned)npjni_NewFloatArray,
    (unsigned)npjni_NewDoubleArray,
    (unsigned)npjni_GetBooleanArrayElements,
    (unsigned)npjni_GetByteArrayElements,
    (unsigned)npjni_GetCharArrayElements,
    (unsigned)npjni_GetShortArrayElements,
    (unsigned)npjni_GetIntArrayElements,
    (unsigned)npjni_GetLongArrayElements,
    (unsigned)npjni_GetFloatArrayElements,
    (unsigned)npjni_GetDoubleArrayElements,
    (unsigned)npjni_ReleaseBooleanArrayElements,
    (unsigned)npjni_ReleaseByteArrayElements,
    (unsigned)npjni_ReleaseCharArrayElements,
    (unsigned)npjni_ReleaseShortArrayElements,
    (unsigned)npjni_ReleaseIntArrayElements,
    (unsigned)npjni_ReleaseLongArrayElements,
    (unsigned)npjni_ReleaseFloatArrayElements,
    (unsigned)npjni_ReleaseDoubleArrayElements,
    (unsigned)npjni_GetBooleanArrayRegion,
    (unsigned)npjni_GetByteArrayRegion,
    (unsigned)npjni_GetCharArrayRegion,
    (unsigned)npjni_GetShortArrayRegion,
    (unsigned)npjni_GetIntArrayRegion,
    (unsigned)npjni_GetLongArrayRegion,
    (unsigned)npjni_GetFloatArrayRegion,
    (unsigned)npjni_GetDoubleArrayRegion,
    (unsigned)npjni_SetBooleanArrayRegion,
    (unsigned)npjni_SetByteArrayRegion,
    (unsigned)npjni_SetCharArrayRegion,
    (unsigned)npjni_SetShortArrayRegion,
    (unsigned)npjni_SetIntArrayRegion,
    (unsigned)npjni_SetLongArrayRegion,
    (unsigned)npjni_SetFloatArrayRegion,
    (unsigned)npjni_SetDoubleArrayRegion,
    (unsigned)npjni_RegisterNatives,
    (unsigned)npjni_UnregisterNatives,
    (unsigned)npjni_MonitorEnter,
    (unsigned)npjni_MonitorExit,
    (unsigned)npjni_GetJavaVM,
    /* add a bunch of blank entries just in case - can't be too careful... */
    0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
    0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
    0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
    0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0
};


