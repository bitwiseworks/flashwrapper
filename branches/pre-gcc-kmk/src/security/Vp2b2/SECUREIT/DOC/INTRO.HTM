<HTML>
<HEAD>
  <TITLE>SecureIt - Introduction</TITLE>
</HEAD>
<body background="backgrnd.gif" onLoad="parent.index.location.href='intro.inx'; return true">
<h1><a name="top">SecureIt - Introduction</h1>
<p>
Many programs get used extensively, and the author or publisher gets
very little in return - be it in sales or postcards. The purpose of this
program is to provide good security for all developers of 32 bit
programs, whether developing commercial or shareware software, with the
end result that more software gets bought instead of pirated.

<p>
The widespread pirating of shareware is due mainly to the fact that
good security is cumbersome and difficult to implement, and you would
rather spend your time improving the application itself.  Even a quite
complicated system is usually not enough, and why bother if it gets
pirated anyway?

<p>
Using the instructions and programs in this package, you can implement a
very high level of security against pirating in your software. No
protection scheme, whether it is implemented in software or hardware, is
100% secure - but SecureIt is about as close as you can come.

<p>
A variety of protection mechanisms are implemented in SecureIt, and you
can pick and choose from the options provided to implement security in
the way best suited to your application.  The core protection in SecureIt
does not work by the principle of "security by obscurity", as is common
in most protection systems, whether they are commercial or home made.
Information about what SecureIt does and how it works is available,
simply because it works even though this information is known. In
contrast, a protection scheme which main feature is one of being obscure
is probably not very secure:  If a protection scheme works by being so
complex that even the programmer cannot figure out how it works, it is
probably no good.  SecureIt makes no secret of how it works - and it
still does.

<p>
SecureIt can make you sleep better at night, and hopefully help
ensure that you get paid for your work:
<ul>
<li>
  Your program can NOT be cracked by someone who does not have access to
  a valid Name/Password combination,
<p>

<li>
  This includes getting access to "registered only" functions, even if a
  potential pirate attempts to change the executable file itself by
  "patching" the code,
<p>

<li>
  If the would-be pirate has access to a valid Name/Password set, he
  will be unable to produce valid keys for another user name, if the
  option to RSA-encrypt passwords is enabled.
<p>

<li>
  The SecureIt algorithm for generating passwords ensures that the
  password for a given name is unique for each SecureIt registration.
  This means that two shareware developers can both use SecureIt for
  protection, and sell their software to the same person.  The
  password strings for one program will not work with the other.
</ul>

<p>
  The one thing no protection scheme can safeguard against is simple
  copying of the key.  If a user gets the name and password from a
  friend, and can live with it displaying his friend's name every time
  the registration information is show, there is little anyone can do.
  To address this problem, SecureIt offers the option of locking out
  certain serial numbers so perpetrators distributing their keys will at
  the very least have to buy a new key to distribute every time you
  release a new version of the software.

<p>
  For information on SecureIt the licencing policy and pricing, please
  refer to the <a href="licence.htm">licence</a> section of this document.

<p>
Please take the time required to read this document in full before
using SecureIt to secure your program - a working knowledge of the
principles behind software protection is important if you wish to make
the best use of SecureIt.


<h2><a name="installing">Installing SecureIt</h2>
<p>
Create an empty subdirectory, and unzip the archive containing the
SecureIt files, including subdirectories.
<p>
This creates the following directory structure on your disk:

<pre>
  .                 Readme.Txt and SECURIT2.DLL

  DOC\              This HTML documentation

  BC                Borland C++ interface files
  BC\SAMPLE         Borland C++ example source and executables

  GCC               GNU C interface files
  GCC\SAMPLE        GNU C example source and executables

  IBMCPP            IBM Visual Age C++ interface files
  IBMCPP\SAMPLE     IBM Visual Age C++ example source and executables

  PASCAL            Virtual Pascal interface files
  PASCAL\SAMPLE     Virtual Pascal example source and executables

  REXX              RXSI2.DLL for using SecureIt from REXX
  REXX\SAMPLE       REXX sample source code

  UTIL              MakeKey programs, GenData utility, and generic
                    setup files for the utilities
</pre>
<p>
  In order to run the precompiled examples, either add the base SecureIt
  directory to your LIBPATH in CONFIG.SYS or copy/move SECURIT2.DLL to a
  directory already listed in the LIBPATH.

<p>
  For REXX programs, the RXSI2.DLL file should be present in LIBPATH.
  SECURIT2.DLL is not used by REXX programs.

<p>
  To use the SecureIt library in your own program, you also need to add
  the relevant C or PASCAL directories to the paths searched when you
  compile (and link, for C compilers).

<p>
  For more detailed information about support for the various compilers,
  please refer to the <a href="compiler.htm">compiler considerations</a>
  section of this document.

<h2><a name="help">About this help system</h2>
<p>
  The help system you are currently viewing uses the Internet HTML
  standard for displaying the help text.  In order to get the most out
  of the help files, you should use a frame-enabled browser such as
  NetScape Navigator, which is available freely from Netscape's web
  site.

<p>
  With a proper browser installed, the help system displays two index
  frames on the left and a content-frame on the right.  All of the
  frames are sizeable so you can fit them on your desktop any way you
  like.

<p>
  The topmost left frame contains the main index at all times, even
  after you have navigated the help system.  This makes it easy to
  navigate between the main topics (ie examples, API definitions,
  advice, etc).

<p>
  The bottom left window contains a detailed index for all topics that
  have enough topics to make it worthwhile indexing.  Every time a new
  main topic is selected, either by following a link or by clicking on a
  main topic in the topmost index window, this window is updated to
  contain a detailed index.  All items in this window navigate the
  document currently loaded into the content window only.

<p>
  The one html/javascript glitch I have been unable to fix is the "back"
  function.  Whenever you switch between main topics, the Back button on
  your browser first changes the content of the subindex frame, and a
  second click on Back is required to make the content of the content
  window go back to the previous location as well.

<p>
  Any suggestions are more than welcome, although I am not much in
  favour of fancy java/javascript animations or flashy background.  The
  help system is designed to help you work efficiently with the SecureIt
  functions, not to look as if it tries to win a multimedia award :-)


<h2><a name="author">The author's background</h2>
<p>
  There is no doubt about it: A good software protection system cannot
  be written by someone who has not spent large amounts of time breaking
  other people's protection schemes.  For this reason, the following
  contains some of the history of the author of SecureIt, Allan Mertner,
  and you can judge for yourself.

<p>
  Attempting to make software protection without some knowledge of the
  theory behind them, how computers and operating systems work, and how
  debuggers in particular work, is comparable to a programmer trying to
  write an application without ever having studied an example.  Or a
  carmaker that has never seen a motor.  While it is possible that the
  result is brilliant, the most likely outcome is that the mistakes made
  by other people's first tries get repeated, with near-useless systems
  as a result.

<p>
  When I got my first computer in 1983, an Amstrad CPC464, I went to
  school and could not afford to buy much software for it.
  Consequently, I had lots of time on my hand and decided to learn how
  it worked internally.  Some of my friends had software however, and
  after teaching myself some basic skills with an assembler and a
  debugger, it became a sport to remove the copy protection from them.
  A particularly clever protection springs to mind, although I cannot
  remember what program it was:

<p>
  The system utilised the fact that the Z80 had a special register that
  got updated every time a byte of code was executed; this register was
  used to decrypt a block of code immediately following the current one.
  The now decrypted code was then used to decrypt the next block, with
  this pattern repeating itself 6 times.  What was particularly nasty
  about this system was that the code would not work if it was
  interrupted by a debugger, modified, or moved in any way - a very nice
  system indeed.

<p>
  The morale is that while it was a very nice system, it still got
  broken; by being persistent, I was able to copy the software in spite
  of the protection.  This reinforces the point that I make in the
  <a href="concept.htm">concept</a> section: To make a system secure,
  bits must be missing from it.  If it is "just" encrypted, it can be
  broken.

<p>
  The Amstrad was replaced by a PC (286/20!) in 1986, and in 1987 I
  started a small software business while attending university in
  Copenhagen, Denmark.  On the PC, the protection systems employed were
  (and many times still are) much more primitive and simple to remove
  than the ones used on the old Amstrad.

<p>
  Again it became a kind of weird sport and intellectual challenge to
  break every piece of new software I bought, just to see what new
  method might be employed this time.  By this time, I was in a position
  to buy my software but still could not resist the temptation of
  looking at and removing the protection after it was installed... I
  guess this is how you know a really sad computer nerd from the next
  one :-).

<p>
  Today, I am running OS/2 Warp 4 and Windows NT 4 on a Pentium Pro 200
  with 32MB of memory, and most software is <b>still</b> not very well
  protected (Yes, I still take a look when I have a spare moment).  Most
  shareware programs I have looked at in the last year use variants of
  those same systems used 10 years ago - and I can usually make a
  one-byte change to the executable to get access to the registered
  features in 5 minutes, and get a valid password for myself by spending
  another 5 minutes.

<p>
  This is sad!  As SecureIt proves, it is possible to design and
  implement a generic protection system that is very, very secure, yet
  no-one appears to have done so.  Until now, that is.

<p>
  <b>Enjoy a bit of security.  Even from the likes of myself...</b>

<p>
  The point is, that a programmer that is not intimately familiar with
  the assembler language, code generators and advanced debugging
  techniques cannot write a secure protection system.  Well, you don't
  have to with SecureIt - those issues have been taken care of for you.

<p>


<h2><a name="history">History of SecureIt</h2>
<p>
  SecureIt really started as a protection system for my first shareware
  program AMOS, the first version of which was released in 1991.  At the
  time, I did not think much about it and just wanted my program to be
  secure from crackers by implementing a system that at least was not
  immediately susceptible to attack (ref the
  <a href="#author">previous</a> section).

<p>
  About a year after the initial release of AMOS, I decided to try to
  contact a few shareware authors I knew had horrible protection in
  their programs to see if they might be interested in a more easily
  accessible version of this software.  Due mainly to technical reasons
  (difficulties in integrating code from different languages in 16 bit),
  the answer was no on every count, and I dropped the idea.
  (Astonishingly, in those few cases where technicalities were not the
  reasons, the authors did not <em>believe</em> my claim that their programs were
  breakable but claimed they had never been broken.  That I could show
  them a password for myself in spite of not having registered did not
  have any great effect).

<p>
  In 1997, I reopened the idea, primarily because I could see that
  software protection had not gotten any better over the years.  In
  spite of the initial negative feedback, I felt that there <b>must</b>
  be a market for a program offering superior protection for a lot of
  programs, particularly since so many authors complain that their
  programs get used a lot, just not registered.

<p>
  What followed was the first version of SecureIt, v1.0, which applied
  most of the principles of good software protection I had learned over
  the years, and then some.  SecureIt v1.0 is a very powerful package,
  but with room for more features - this has been amended in v2.0 and
  the trend is expected to continue with the upcoming Win32 and future
  version of SecureIt.

<p>
  A brief summary of versions follows:
<p>
<table width="100%" cellspacing=1 border=all>
<tr>
<td valign=top>Version</td>
<td valign=top>Type</td>
<td valign=top>Description</td>

<tr>
<td>v2.0</td>
<td>OS/2</td>
<td>New, improved version</td>

<tr><td></td>
<td>New</td>
<td>Optional Serial number assigned to each user</td>

<tr><td></td>
<td>New</td>
<td>S/Ns can be locked out or expire on a certain date</td>

<tr><td></td>
<td>New</td>
<td>Documentation changed to HTML format in anticipation of Windows version</td>

<tr><td></td>
<td>New</td>
<td>Optional RSA-encrypted passwords</td>

<tr><td></td>
<td>New</td>
<td>RSA-encrypted data block containing user strings, serial
number restrictions and SecureIt executable code
</td>

<tr><td></td>
<td>New</td>
<td>Presentation Manager MakeKey program</td>

<tr><td></td>
<td>New</td>
<td>REXX interface and example programs available</td>

<tr><td></td>
<td>New</td>
<td>GNU C interface and example programs available</td>

<tr><td></td>
<td>New</td>
<td>PM MakeKey Distributable Client for your distributors</td>

<tr><td></td>
<td>New</td>
<td>Checksummed Registration Log file can be generated</td>

<tr><td></td>
<td>New</td>
<td>10 new SecureIt API calls</td>

<tr><td></td>
<td>New</td>
<td>Possibility of specify code-relative Call and Patch fields</td>

<tr><td></td>
<td>New</td>
<td>Optionally uses v1.0 compatible passwords</td>

<tr><td></td>
<td>New</td>
<td>Option to disregard high-ascii characters in user name</td>

<tr><td></td>
<td>New</td>
<td>New functions to calculate checksums of data and files</td>

<tr><td>1.0a</td>
<td>OS/2</td>
<td>Update version</td>

<tr><td></td>
<td>Bugfix</td>
<td>When multiple applications using SecureIt ran simultanously,
OS/2 could hang
</td>

<tr><td></td>
<td>New</td>
<td>Added INF version of documentation</td>

<tr><td>v1.0</td>
<td>OS/2</td>
<td>Initial release version</td>
</table>

</body>
</html>
