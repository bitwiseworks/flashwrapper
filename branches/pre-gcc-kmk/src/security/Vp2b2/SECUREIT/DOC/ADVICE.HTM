<HTML>
<HEAD>
  <TITLE>SecureIt - Advice about software protection</TITLE>
</HEAD>
<body background="backgrnd.gif" onLoad="parent.index.location.href='empty.htm'; return true">

<h1>General advice about software protection</h1>
<p>
SecureIt handles the mechanics of validating entered names and
passwords, and handles the interaction with your program.  Still, this
section contains information about software security that you should
know if you want to make your program really secure. After all,
SecureIt cannot help you write good programs - that you must do
yourself.
<p>
The following points are important to keep in mind, and SecureIt helps
you implement most of them.

<ul>

<li>
Do not make any preliminary checks about name and password.  If your
code starts by verifying that the password entered contains valid
characters only, or that it is of a certain length, you have given
valuable information away.

<p><li>
Do not check whether the entire key entered is valid.  Instead, check
part of the key and use the rest of it for decoding, etc.

<p><li>
Scramble all plaintext constant data to do with registration. Strings
such as "registered to" and "unregistered" should always be scrambled
and only un-scrambled when needed.  A clever pirate will search for
these strings and can quickly find the code that accesses them.

<p><li>
Once variable data to do with registration has been used, overwrite
or scramble it.  The username and passwords should be encrypted
before use and storage, to make it more difficult to find the code
that handles that data.  Code that is only used once and should not
be called again can even be overwritten in memory.

<p><li>
Make sure the crippled program you distribute for evaluation has
crucial bits missing.  If the entire functionality is included in the
public version and registration is just a matter of setting the right
variable(s) to TRUE, it will be broken.  The name and password
supplied by the user must add information, not just a simple check.

<p><li>
Do not allow the user more than one attempt at entering the password.
If an invalid password is entered, the user should be required to
exit and restart the program before he gets another go.  If he is a
legitimate user, this is annoying - but only once - and if a pirate
is forced to do this, it is very annoying indeed.

<p><li>
If possible, do not display a message after the user has entered name
and password.  This makes it more difficult to see which check is the
real validation check, and which checks are something else. If you
must, rely only on a partial check with no real substance for this.

<p><li>
Distribute your registration checks throughout the code.  Having a
very complex checking routine in place does not help much if all it
does is to return TRUE or FALSE and it is only ever called once.
</ul>
<p>
As mentioned above, these are guidelines that should be followed in
your program if you wish it to be secure from tampering.  The
key-management issues are handled by SecureIt, but it is important for
you to know what is going on as well.
</body>
